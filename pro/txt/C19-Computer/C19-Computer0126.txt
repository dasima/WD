计算机应用
COMPUTER APPLICATIONS
1999年 第19卷 第10期 Vol.19 No.10 1999



iRMX环境下的实时程序设计
张建志
　　摘　要　实时应用程序设计和传统应用程序设计在许多方面有显著不同。本文首先论述实时程序设计所面临的主要问题，接着介绍iRMX for Windows实时OS环境下玻壳尺寸数据实时测控系统的实现，最后概述两个关键技术问题的处理方法。
　　关键词　iRMX，实时程序设计，玻壳，测控
REAL-TIME PROGRAMMING IN IRMX ENVIRONMENT
Zhang Jianzhi 
Southwest Computer Center, Sichuan.Mianyang 610003
　　Abstract　There are outstanding differences in many ways between traditional programming and real-time programming. In this paper the first discussion is the main factors of the real-time programming. Then, introduces the iRMX for Windows, and the implementation of the real-time measuring control system used in a color bulb manufacturer. At last, outlines the treatment of two technical key problems in the development process.
　　Keywords　iRMX, Real-time programming, Bulb, Measuring control
1　前言
　　实现实时控制的计算机系统称为实时系统，它必须在限定的时间内对外来的信号或事件进行处理并做出适当反应，从而创建一种平稳高效的工作流程。一般实时应用系统是在实时操作系统基础上构造的。就实时性而言，嵌入式系统也属于实时系统，但它运行时并不需要实时OS。因此，实时系统有多种构造方式和表现形式。对于较大规模的实时应用系统，应该说：实时系统=计算机+实时OS+实时应用程序+外部过程接口。
　　一个实时应用系统的实时性，要靠实时OS和实时应用程序共同保证。因此，实时OS是基础，实时应用程序是关键。实时OS为实时应用程序提供开发和运行环境，保证确定性和实时性是其最高设计目标。
2　实时程序设计所面临的问题
　　不同于传统应用程序设计，实时应用程序一般是靠事件驱动的：异步事件触发一系列计算，而这些计算必须在规定的时限内完成，以保证应用系统的正常运作。在iRMX系统中，内部事件是能够导致任务状态变化的某个系统调用和有关目标。典型的外部事件是中断信号。
　　实时应用程序必须保证逻辑上的正确性和执行时间上的正确性，必须显式地处理系统程序面临的一些问题，如并发性、任务管理和调度、任务间通讯和互斥等。在iRMX环境下进行实时程序设计还应考虑以下问题。
2．1　影响实时性的因素
　　决定一个计算机系统实时性的主要因素包括确定性、速度、任务现场切换时间（CST）和中断响应时间（IRT）。其中确定性最重要，它主要取决于OS的性能。
　　CST分三个阶段：①识别现场切换时机，并选择下一个要执行的任务；②保护当前任务的CPU现场，以便再次执行；③加载新任务的现场，并开始执行。阶段①由OS的任务调度程序决定。阶段②和③取决于CPU相关指令的执行速度。
　　IRT的大小主要取决于OS的中断管理机制。IRT也受硬件的约束，因为CPU只能在一条指令执行完毕后才能识别中断请求，而一般CISC最长指令和最短指令的执行周期达100：1，所以IRT必须按最坏的情况考虑。但与OS的中断管理机制相比，IRT的硬件因素显然是微乎其微的。
　　为减小IRT， iRMX支持两级中断管理机制：一级是中断处理程序，另一级是中断任务。中断处理程序在当前任务现场执行（无任务CST），进行简单的数据采集和外部事件应答。而中断任务和系统中的其它任务一样，竞争使用CPU，进行较复杂的数据处理。是否使用或如何使用这一机制，则由应用设计者决定。
2．2　任务调度
　　iRMX OS的任务调度程序采用抢占式基于优先级的调度算法。系统不干涉应用任务的优先级。运行的任务一直运行下去，唯一能停止当前任务运行的条件是，任务进入就绪状态以外的其它状态，或有一个比其优先级更高的任务进入就绪状态。任务的就绪态->运行态、睡眠态->就绪态、和睡眠/挂起态->挂起态的转换，是由调度程序主动完成的。任务的其它状态转换，则由应用任务自己主动申请，由OS任务调度程序协助完成。
　　应用程序要合理地安排好各任务的优先级。一般的做法是，使任务的优先级正比于相应事件的到达速率（即任务的到达速率越快，其优先级越高）。这种简单的调度算法，可能导致事件丢失。
　　因此在设计硬实时系统时，应用程序应该采用适应性任务调度算法（采用中断排队缓冲技术和动态修改优先级的办法，最大限度地满足各任务的时限）。首先测量和计算各任务的λ/τ/δ（事件到达速率/所需CPU时间/时限）参数，然后确定调度算法，并用软件模拟，逐步修改完善。如果一个实时应用系统希望OS采用适应性调度算法，则必须有一种办法，将每个任务λ/τ/δ参数通知实时OS的调度程序。遗憾的是，实时OS一般不支持适应性调度算法。因此，适应性调度算法只能靠应用程序实现。
　　需要指出的是，如果一个应用系统的所有任务存在关系∑λi*τi≮1（i为任务号），那么，无论采用何种调度策略和算法，都无法满足该系统的实时性要求。这意味着，任何计算机系统的时间和空间资源都是有限的，其负载能力也是有限的。
3　应用系统概述
　　彩色玻壳生产是一个规模较大，工艺复杂，技术含量较高的工业制造过程。必须要有一个相应规模的生产计算机网络，对各条生产线进行自动生产计数、外观缺陷计数、尺寸测量和现场设备的协调控制，并能对大量的历史数据进行综合分析处理，以提供质量控制、现场设备调整、生产计划等决策支持。生产计算机系统由上位机系统和下位机系统两级结构组成。从功能观点看，上、下位机系统均分为计数和尺寸两个子系统。上、下位机的应用系统通过Ethernet局域网，采用TCP/IP协议，实现系统互联和通讯。本文着重介绍尺寸下位机TCU（Terminal Control Unit）子系统的实现。
3．1　总体需求简介
　　尺寸应用系统由多台自动和手动尺寸测量TCU组成。
　　自动尺寸测量TCU系统的构成如图1所示，用于玻壳产品的全数检。其主要功能是，实时采集和处理尺寸数据，协调控制现场设备正确动作，自动接收摄像机发来的玻壳设备编码（FACTOR），并和尺寸数据一起存盘，实时传给上位机。

图1　自动尺寸测量TCU系统的构成
　　手动TCU的功能要求和自动TCU的基本相同，差别有：①手动TCU要挂接3个现场测量终端，要求能同时工作；②在系统控制台上要能监视3个测量终端的测量结果；③不需要与现场其它设备进行DI/DO操作，通过和操作人员交互完成对玻壳的各种数据测量和处理。
　　为了对工艺和设备的变化有很强的适应能力，要求尺寸测量TCU系统具有处理最多224路模拟信号和32DI/32DO开关信号的能力。比如，TCU既可以挂接数字量规，也可以挂接模拟量规，量规台数（1～3台）和测量点数是可变的；挂接的摄像机可以是开关量的，也可以是串行口的，等等。除工艺文件外，类似这样的环境参数和功能选项必须是动态可配置的。各TCU要能自动生成新的测量程序，以便快速适应生产线的产品换型。要求每台尺寸TCU能保存当前30～50万枚玻壳产品的原始数据记录（504字节/枚），具体数量可自由设定。
3．2　实时性和并发性需求
　　概括地说，尺寸TCU应用系统的实时性和并发性需求有以下几个方面：
　　（1） 实时测量处理生产线上的玻壳尺寸数据，协调控制现场其它设备动作。自动尺寸TCU的现场终端，在显示测量结果的同时，可以及时响应操作人员的各种操作命令。如移动自动测量数据的显示点位置，进行人工设备编码输入等。
　　（2） 在本地系统控制台或远程终端上，可以进行工艺文件维护，自动生成计算公式和测量程序，输出各种报表，动态配置现场测量程序的环境参数。
　　（3） 远程标题登录（主动向上位机申请一组工艺文件）。
　　（4） 在系统控制台或远程终端上，反馈监视现场终端的测量画面。
　　（5） 实时接收上位机下传的工艺文件，并自动刷新测量程序的内存工艺参数。
　　（6） 在0.5ms内读入摄像机发来的玻壳设备编码。
　　（7） 尺寸数据实时上传。在10%的时间内，将最多40台尺寸TCU中堆积的数据送往上位机。
　　（8） 尺寸TCU与上位机自动同步。
　　（9） 实时向上位机发送尺寸TCU的运行状态和报警信息。
　　（10） 手动TCU的三个终端可以同时进行玻壳尺寸测量。
　　（11） 上述所有功能的同时执行，不能影响数据采集处理和生产线的动作节拍。
3．3　 应用系统的实现
　　从上述需求情况可以看出，尺寸TCU应用系统的OS要能同时支持多用户/多任务/实时性。DOS显然不能胜任。OS/2和Windows虽然是多任务系统，但是不支持多用户，所以也不可取。我们选用iRMX for Windows作开发环境和目标环境，用Intel C作开发语言。整个尺寸应用系统软件由31个独立的可执行程序组成。为了方便使用和系统管理，将全部程序集成为4个子系统。整个尺寸应用系统运行稳定可靠，完全满足用户需求。
　　尺寸TCU应用系统采用iRMX的两级中断管理机制和动态修改任务优先级的办法，在确保测控任务的实时性前提下，使其它作业有充足的机会使用CPU。应用系统的技术关键还有不同作业的动态数据交换、任务的通讯和互斥操作。
4　不同作业任务间的通讯
　　同一台尺寸TCU中，不同作业任务间要进行通讯，必须将用于通讯的iRMX目标登记到约定的作业目录下，以便双方查找和使用该目标。不同作业任务间不能用直接共享内存或直接共享目标进行通讯。
　　在同一台尺寸TCU系统中，不同作业任务间通讯的典型例子是后台作业APNETJOB和前台作业TCUSTART、TERMAT、TERMMA和PCTOOL等之间的通讯。APNETJOB的数据追赶任务接受PCTOOL数据追赶请求，向上位机发送需要追赶的尺寸数据，然后向PCTOOL报告有关情况。APNETJOB中的正常数据发送任务和数据追赶任务，通过全局变量start―keepup/APNetKeepOver通讯。
　　PCTOOL与APNETJOB通讯还可以采用其它处理方式。但是，只靠文件通讯将严重影响程序执行效率和通讯的实时性。
5　临界资源的互斥访问
　　手动TCU需要挂接三台终端，同时启动三个测量作业。三个作业使用同一个尺寸数据文件TCUii和索引文件TCUii.IDX（ii为TCU号），它们存放尺寸数据和建立索引的操作必须协调一致。所以手动测量程序必须确保对这两个文件写操作的互斥性。尽管每个测量点只占用一个A/D通道，但是对于A/D卡来说，多个模拟量共用一个A/D转换蕊片，并且任何两台量规的部分模拟信号很可能占用同一块A/D卡（因为每个A/D卡为32路，而每根电缆跑20路），所以，手动测量程序也必须保证互斥地操作A/D卡。否则，任一量规的测量结果随时都可能出错。
　　数据/索引文件的互斥访问处理与之类似。每个测量作业随时可能从手动测量程序TERMMA退到TCUSTART下（测量集成环境）。TCUSTART也可以退出，但退出后HI又自动启动它。之所以如此，是为了便于系统维护和管理。因此，让TERMMA或TCUSTART来创建该互斥机构都是不合适的。因为一旦创建者退出系统后，其它测量作业对该互斥机构的访问将是非法的。所以，AD―MUTEX只能由后台作业APNETJOB来创建，并登录到系统的根作业目录下。
　　iRMX临界区是实现临界资源互斥访问的一种专门控制机制。但是，一单位信号灯AD―MUTEX同样可以实现互斥操作。
6　总结
　　iRMX提供了保证实时性的内部机制，但是，对这些机制的触发和运用则是应用开发者的事情。因此，只有彻底理解多任务并发执行和有关任务间的同步、通讯、互斥操作和任务调度等概念和原理，充分掌握并发程序设计的思想和方法，全面熟悉具体实时OS的有关环境和系统调用，才能设计好一个实时应用系统。实时应用程序设计与传统应用程序设计的主要区别在于：各自的主要设计目标不同，所面临的技术问题不同。但成熟的软件工程理论和传统的程序设计方法都可以借鉴。面向过程的设计技术和面向对象的设计思想同样适合实时程序设计。
作者简介：张建志　高级工程师。主要从事：工控应用开发、实时系统研究。
作者单位：西南计算中心　四川.绵阳（610003）
参考文献
［1］　Christopher Vickery. Real-Time and Systems Programming for PCs. McGraw-Hill，1993
［2］　Radisys Corporation. iRMX Programming Techniques, 1996
［3］　谭浩强，等. 程序设计与开发技术. 北京：清华大学出版社，1991
收稿日期:1999-05-20
