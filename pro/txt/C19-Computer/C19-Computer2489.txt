软件学报
JOURNAL OF SOFTWARE
2000　Vol.11　No.3　P.386-392



基于Shared-Nothing的并行Hash连接算法效率分析
李庆华　睢海燕　邓冲
摘要　该文研究了基于Shared-Nothing结构的几种常用并行连接算法,分析了影响查询响应时间的各种因素.在此基础上,以多种硬件成分作为参数建立一个代价分析模型.使用该模型计算并行Hash算法在每个处理机上的平均任务执行时间和总的查询响应时间,并比较了几种算法在不同硬件配置下的执行效率.所提出的模型和分析方法为评价和选取并行连接算法提供了一种可行的途径.
关键词　查询并行处理,并行连接,查询响应时间,性能评价模型.
中图法分类号　TP338
Analysis of the Efficiency of Parallel Hash-Join Algorithms Based on Shared-Nothing
LI Qing-hua　SUI Hai-yan　DENG Chong
(National High Performance Computing Center Wuhan　430074)
LI Qing-hua　SUI Hai-yan　DENG Chong
(School of Computer Science and Technology Huazhong University of Science and Technology Wuhan　430074)
Abstract　Based on the shared-nothing construction,the various factors which may affect the query responding time of parallel join algorithms are analyzed.A cost analysis model is proposed to calculate the average task execution time on each processor and the total query responding time.The execution efficiencies of different parallel Hash algorithms based on the variation of memory are compared.The presented model and the analysis method have provided a feasible way to evaluate and choose parallel join algorithms.
Key words　Query parallel processing,parallel join,query responding time,model of performance evaluation.
　　多年来,并行连接算法一直是并行查询优化中的一个研究热点［1］.人们在串行算法的基础上已提出了3种有效的并行连接算法：并行嵌套循环（nest-loop）连接算法、并行排序归并（sort-merge）连接算法和并行哈希（Hash）连接算法.大量文献表明［2］,当处理相等连接、关系很大且内存足够大时,Hash连接算法有明显的优势.由于其高效性和容易被并行化的特性,并行Hash连接算法的研究引起了人们的关注,相继提出了多种基于Hash的并行连接算法［3,4］.
　　基于SN(shared-nothing)结构,如何评价一个连接算法的性能,如何根据实际的应用选取连接算法,需要一个好的性能评价模型.然而,经多年研究,至今尚未提出一个能被广泛接受的、好的性能评价模型.
　　本文首先研究了基于SN结构的Simple-Hash,Grace-Hash,Hybrid-Hash这3种并行连接算法,分析了影响查询响应时间的各种因素,然后以多种硬件成分作为参数建立一个代价分析模型,使用该模型来计算并行Hash算法在每个处理机上的平均任务执行时间和查询响应时间,并分析了内存容量、网络传输速度、处理机数等硬件参数对这3种算法执行效率的影响,从而为如何评价和选取并行连接算法提供了一种可行的途径.
1 并行Hash连接算法
　　假定系统中有P个处理机,R和S是作连接运算的两个关系,R为其中较小的关系.这3种算法都采用散列水平划分法.Ri,Si分别表示处理机i上的R分片和S分片.实际的连接运算由对分块建造Hash表(building)和探测匹配元组(probing)实现.
1.1　并行Simple-Hash-Join算法
　　Step l.处理机i(i=1,2,...,p)从本地磁盘读取Ri,对其中每个元组的连接属性用Hash函数h1进行散列，以决定其处理机号j.如果j=i,则将其放入本地的写盘缓冲区,否则放入相应的远程处理机的通信缓冲区中,当缓冲区满时,写回磁盘或向远程处理机发送.同时,处理机接收并合并从其余P-1个处理机发送来的元组.在这一步结束时,关系R在各个处理机间重新分配.
　　Step 2.以同样的Hash函数在各个处理机间重分配S.
　　Step 3.各个处理机分别定义自己的Hash函数h2,并行地做Simple-Hash-Join.最后进行结果合并.
1.2　并行Grace-Hash-Join算法
　　(1) 分配阶段
　　Step l.处理机i(i=1,2,...,p)从本地磁盘读取Ri,对其中每个元组的连接属性用Hash函数h1进行散列，以决定其处理机号j和桶号k（k=1,2,...,B,B与处理机数无关,只需保证每个桶的Hash表能够装入本地的内存）.若它属于本处理机的某个桶,则存入相应的写盘缓冲区,否则放入相应的远程处理机的通信缓冲区中.当缓冲区满时,写回磁盘或向远程处理机发送.同时,处理机接收并合并从其余P-1个处理机发送来的桶.在这一步结束时,关系R在各个处理机间重新分配.
　　Step 2.以同样的Hash函数在各个处理机间重分配S.
　　(2) 连接阶段
　　处理机i（i=1,2,...,p） par-do
　　For j=1 to B 重复Step 3,Step 4.
　　Step 3.从磁盘读出R′ij,创建Hash表.
　　Step 4.从磁盘读出S′ij,用每一个元组探测R′ij的Hash表,输出结果.
1.3　并行Hybrid-Hash-Join算法
　　并行Hybrid-Hash-Join算法和并行Grace-Hash-Join算法的主要区别在于：Grace-Hash-Join算法在第1步中利用多余的内存来存放第1个桶的文件,而Hybrid-Hash-Join算法则利用这片内存来构造第1个桶的Hash表.因而在第2步S中属于第1个桶的元组可以立刻探测内存Hash表,而无需再保存于临时文件中.两个算法都是由小关系的大小来决定桶的数量.
　　(1) 分配阶段
　　Step l.处理机i(i=1,2,...,p)从本地磁盘读取Ri,对其中每个元组的连接属性用Hash函数h1进行散列，以决定其处理机号j,用函数h2决定其桶号k（k=0,1,...,B,B与处理机数无关,只需保证每个桶的Hash表能够装入本地的内存）.若它属于本处理机且k=1,则元组插入到内存的Hash表中；若属于本处理机但k≠1,则存入相应的写盘缓冲区；若不属于本处理机，则放入相应的远程处理机的通信缓冲区中.当缓冲区满时,写回磁盘或向远程处理机发送.同时,处理机接收从其余P-1个处理机发送来的桶,用函数h2决定其插入Hash表中或写入磁盘.在这一步结束时,关系R在各个处理机间重新分配.
　　Step 2.以同样的Hash函数划分Si,若属于本处理机的第1个桶,则将它与Ri1内存Hash表匹配连接;若属于本处理机的其余桶,则存入磁盘;若属于其他处理机,则发送到相应的处理机.
　　(2) 连接阶段
　　处理机i（i=1,2,...,p） par-do
　　For j=2 to B 重复Step 3,Step 4.
　　Step 3.从磁盘读出R′ij,创建Hash表.
　　Step 4.从磁盘读出S′ij,用每一个元组探测R′ij的Hash表,输出结果.
2 算法的响应时间分析
　　在理想情况下,各个处理机承担相同的任务,具有相同的执行时间,此时,查询响应时间即等于任意一个处理机上的任务执行时间.但是,由于受很多因素的影响,某些任务在完成到可以提交时存在一段时间间隔,称为同步延时.导致算法同步延时的因素主要有数据偏斜(data skew)，它包括元组放置偏斜、选择偏斜、重分布偏斜、乘积偏斜.另外，还有一些随机因素，比如因数据放在不同磁盘的不同地方而导致不同的数据读取时间、通信网络的随机通信延迟等［5,6］.
　　用Q(0≤Q≤1)表示数据分布偏斜.Q表示关系中含最高偏斜属性值的一个片段,被分配到一个特定的桶,假定关系的剩余部分在属性值上的分布相对均匀.当处理机个数为P且Q≤1/P时,可视为无偏斜,否则有偏斜.i表示任一处理机号；k表示接受偏斜桶的处理机号；j表示不同于k的任一处理机号；T表示查询响应时间；T(i)表示处理机i上的平均任务执行时间；T(i)cpu表示处理机i上的cpu时间,由cpu处理元组时间,处理物理I/O时间和cpu处理机间通信时间组成；T(i)disk表示处理机i上的磁盘传输时间；T(i)net表示处理机i上的网络传输时间.
　　根据在第1节中所描述的算法,在流水线并行的情况下,处理机i上的平均查询响应时间T(i)近似为
T(i)=MAX(T(i)cpu,T(i)disk,T(i)net).
(1)
整个系统的查询响应时间为

(2)
3 算法的代价公式
　　以往对于并行连接算法的研究模式是,提出一种改进的并行算法,然后对它进行性能分析［7］.在这种模式中,代价分析处于被动地位,而且分析方法比较片面,对影响算法的因素考虑不全.在本文中，我们从一个新的角度出发,建立一种代价分析模型,用这种模型来评价并选择合适的并行连接算法.我们将综合考虑影响查询响应时间的诸多因素,建立一个基于多种硬件参数的代价分析模型,定性地推导3种Hash连接算法的代价公式.模型中描述了系统3个主要资源（CPU,I/O和互联网）的重叠,刻画了数据偏斜（包括重分布偏斜和乘积偏斜）和同步延迟等因素对执行效率的影响.利用本文提出的代价模型,我们可以分析并行连接算法在各种硬件配置下的执行效率,为查询优化中并行连接算法的选取提供理论依据,对新的连接算法设计也具有一定的指导意义.
3.1　参数配置
　　P表示处理机数；μ表示处理机速度（cpu每秒执行指令数)；M表示每个处理机的可用内存；R,S表示参与连接的关系；β表示连接选取率；γ表示内存与小关系的比率；H表示散列表膨胀系数；Ri,Si表示初始库划分后处理机i上的R和S片段；R′i,S′i表示数据重新分配后处理机i上用来作连接的Hash桶；Fi表示在有各种输出缓冲区的情况下,R′i的Hash表可被装入内存的部分；Tio表示磁盘传送时间（以页为单位）；Tnet表示网络传送时间（以页为单位）；Id表示启动一次I/O的路径长（指令数)；Icomm表示在网络上交换一次消息的路径长；Icomp表示比较两个属性的路径长；IHash表示计算属性值的散列值的路径长；Ibuild表示构造一个连接输出元组的路径长；Imove表示在内存中移动一个元组的路径长；｜X｜表示X中的页数；｛X｝表示X中的元组数.
3.2　并行Hash算法代价公式
　　(1) 并行Hybrid-Hash算法
第1阶段
I/O存取页面数：N1io=(｜Ri｜+｜Si｜)+(1-Fi)(｜R′i｜+｜S′i｜)　(上标表示阶段,下同)
　　I/O存取时间：T(i)1disk=N1io*Tio
　　从网络发送和接受的页面数：N1net=(｜Ri｜+｜Si｜)*(p-1)/p+(｜R′i｜+｜S′i｜)
　　网络传送时间：T(i)1net=N1net*Tnet
　　CPU处理元组时间：
T(i)1cpu=(｛Ri｝+｛Si｝+｛R′i｝+｛S′i｝)*(IHash+Imove)/μ+N1io*Id/μ+N1net*Icomm/μ
说明：为方便计算,将连接运算的时间统一在第2阶段来计算.
　　第2阶段
　　I/O存取页面数：N2io=(1-Fi)(｜R′i｜+｜S′i｜)
　　I/O处理元组时间：T(i)2disk=N2io*Tio
　　CPU处理元组时间：
T(i)2cpu=(1-Fi)*(｛R′i｝+｛S′i｝)*(IHash+Imove)/μ+{S′i｝*H*Icomp/μ+
｛R′i｝*｛S′i｝*β*Ibuild/μ+N2io*Id/μ
因而,最终处理机上的I/O存取时间：T(i)disk=((｜Ri｜+｜Si｜)+2*(1-Fi)(｜R′i｜+｜S′i｜))*Tio
　　网络传送时间：N(i)net=((｜Ri｜+｜Si｜)*(p-1)/p)*Tnet
　　CPU处理元组时间：
T(i)cpu=(｛Ri｝+｛Si｝+(2-Fi)(｛R′i｝＋｛S′i｝))*(IHash+Imove)/μ+｛S′i｝*H*Icomp/μ＋
　　｛R′i｝*｛S′i｝*β*Ibuild/μ+((｜Ri｜+｜Si｜)+2