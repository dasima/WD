航空计测技术
AVIATION METROLOGY & MEASUREMENT TECHNOLOGY
1999年　第19卷　第6期　Vol.19　No.6　1999



软件自动生成技术在测试上的应用
陈大港　陈光
　　摘要　作为CAT工作站的软件平台，可视化自动测试环境(简称VATE)的应用对提高测试软件开发效率和测试系统中PC资源的充分利用有不可估量的作用。本文介绍了一种在Microsoft Windows平台上开发测试软件自动生成环境的方法，即通过组建仪器驱动器库，利用结构化的流程设计思想来实现测试软件的生成。
　　关键词　CAT工作站　可视化自动测试环境　仪器驱动器　流程设计
Application of Software Automatic Generation Technique to Testing
Chen Dagang,Chen Guangju
　　Abstract　As the software platform of CAT work station,the application of Visual Automated Test Environment (VATE) has inestimable effect on heightening the developing efficiency of the testing software and fully using the PC resource in measuing system.This paper introduces a method of developing the testing software automatic generation environment on the Microsoft Windows platform.That is through setting up the instrument driver database and using constructural process design idea to relialize the testing software generation.
　　Key words　CAT work station,VATE,Instrument drivers,Process design
　　作为计算机技术和自动测试技术发展的产物，CAT工作站使计算机在测试系统中的作用不再仅仅局限于控制技术的提高。与传统的自动测试系统组建方式不同,CAT工作站并非针对特定的测试任务，而是着眼于集成化的测试与开发环境。它主要由以高档测试控制计算机为主的硬件平台和基于多窗口管理系统的可视化自动测试环境(VATE)等软件平台组成。测试系统各组成部分可共享系统的硬件与软件资源，因而能够加快测试过程及开发速度，并方便系统的组建，以完成多参数的自动测试。
　　CAT工作站的控制核心为其软件部分――VATE，它是软件自动生成技术在测试上的具体运用，充分发挥了计算机的图形功能，将仪器控制、数据分析、分布式测试技术等均用可视化部件实现，提高了开发效率。目前，测试软件自动生成技术有两种实现方法：代码生成和流程设计。代码生成方法一般以C＋＋语言为基础，可自动生成仪器控制以及测试结果数据处理、图形显示等代码，并自动嵌入测试软件中，编译后即可运行,如LabWindows／CVI。它对测试工程师的编程水平要求较高，但使用较为灵活。流程设计方法则利用可视化功能部件以流程图的设计方式完成测试软件的编写工作，开发效率相对较高，且简单易用，HPVEE和LabView是其中的代表。本文采用流程方法来实现一个通用的测试软件开发环境。它具有以下优点：
　　.友好的图形界面；
　　.开放的仪器驱动库；
　　.编程简单；
　　.可对测试结果进行复杂的数学分析，并以各种图形方式加以直观描述；
　　.支持远地数据传输。
1　系统构架
　　可视化自动测试环境(VATE)由虚拟仪器驱动器管理器(Visual Instrument Driver Manager，简称 VIDM)和流程设计环境(Flow Designing Environment，简称FDE)两大部分组成。其中IDM是测试控制的核心。测试软件依靠它来完成对仪器的控制。作为一个功能完善的开发和管理工具，IDM可完成仪器驱动器的设计和调试，并提供FDE能够辨识的文件格式生成工具。FDE是一个图形化的自动测试软件编制工具，它以图形化编程元素的方式向测试人员提供编程所需的各种虚拟控件，如循环、分支、结果显示、数据传输、仪器控制等，根据既定的测试任务，测试工程师按照测试流程，将这些编程元素组合起来，即可生成所需的测试软件。除此之外，FDE还可完成对测试结果的各种处理，如图形比对、测试报告自动生成等。
　　整个软件平台的设计是采用Borland C＋＋、Visual Basic以及Access来实现的。其中，仪器驱动器通过底层的接口驱动软件(GPIB.DLL)来程控仪器，有关仪器的程控信息和流程设计中的可视化部件信息由数据库来管理。在运行库函数控制下，测试软件按顺序执行。
2　虚拟仪器驱动器
　　虚拟仪器驱动器是仪器程控代码、计算机软件技术和测试接口三者相结合的产物，是一个包含实际仪器使用、操作信息的软件模块。它的上层是一系列按功能分组的主／副软面板，每个软面板又由一些按键、旋钮等组合而成，每个控件都对应不同的功能，即其程控代码相异。它的底层部分则基于一组I／O函数和测试接口，实时模式下，测试人员对软面板上控件的操作将直接反映到真实仪器上。
2.1　虚拟面板及控件
　　仪器驱动器和用户直接打交道的部分是操作接口,即虚拟软面板和面板上的控键。由于大多仪器功能繁多，为便于测试人员操作方便，每个虚拟仪器驱动器都由若干虚拟面板构成。虚拟面板一般包括功能性面板和描述性面板两类。功能面板并不完全对应仪器的真实面板，它实际上是对实现仪器功能按键的重新组合。图1显示了HP33120A的一个虚拟面板。由图可知，每个虚拟面板对应Windows的一个窗体(Form)，窗体大小与面板包含的功能按键多少有关，用户可任意调整其大小。除控键外，面板还提供仪器地址、面板名称等一系列虚拟面板属性信息。此外，描述性面板对用户也非常重要，它有助于测试人员在组建系统时有效地选择仪器。


图1　IDM中生成的虚拟面板
　　仪器的真实面板一般由各种按键、旋钮等控键组成。为了给测试人员一个直观的显示，虚拟面板的实现也采用这种方法，其上的控键则利用计算机的图形技术生成。我们按照控键的功能和形态将其总结归纳为10种，他们分别是单次按键、旋钮、二态键、组键、复选键、单选键、面板控制框、输入文本框、标签和波形显示键。其中二态键根据形态的不同又划分为13种，面板控制框则根据功能的区别划分为两类。
　　作为一个优秀的基于Microsoft Windows平台的可视化软件开发环境，Visual Basic支持面向对象的设计技术，如窗体(Form)类和控件(Controls)类的继承和派生等。这些类的属性在VB中都被良好封装，由它们派生出来的特定对象就继承了其所有属性，用户再对这些对象的若干属性加以修改，便生成所需的虚拟面板及控件。由于VB环境中工具箱内的控件过于单调，自身属性也无法满足仪器控件的需要，例如它们都不具有程控代码，因此必须在此基础上对其进行相应的扩充，即以VB原有控件为模板，再添加更多的属性和事件，并封装为虚拟仪器驱动器的可视化部件的基类。
　　在设计时，我们首先定义好窗体和控键的基类，在利用VB提供给类的组(Array)生成技术来动态生成虚拟仪器驱动器的虚拟面板和虚拟控键。例如：设计好面板和单次按键基类后，利用VB语句：
　　Global Vpanels()As New FrmDriver
　　Global PushButton()As New PushBtn
　　声明一个面板和单次按键的动态数组，数组的每个成员代表其基类派生的单个实例或对象，并完全继承了面板或单次按键基类的公共属性。运行时，通过定义其数组大小和调用各自方法Load和Unload，完成虚拟面板和控键的动态装载和卸除。而且，用户可对它们分别编辑，如设置其名称和程控代码：
　　PushButton(I).Caption＝"方波"
　　PushButton(I)/Code＝"FUNC:SHAP SQU"
　　使它们拥有各自不同的属性，完成对特定面板或控件的设计。
2.2　仪器驱动器文件的生成
　　以上介绍了仪器驱动器软面板的实现过程，事实上，脱离应用软件开发环境的仪器驱动器实用价值并不大。仪器驱动器建立的主要目的是完成测试软件的生成，即利用它的编程接口将测试人员在虚拟面板上的一系列操作转化为相应的程控代码，并嵌入到测试程序中，完成测试软件中仪器程控部分的生成。因此，如何保存仪器驱动器信息，特别是虚拟面板上控件所对应的程控信息，对应用软件环境的开发人员来讲十分关键。通常，VB中采用顺序文件来实现文件的存储，同数据库存储技术相比，这种技术在文件数据的共享方面存在很大限制。在这里，我们利用VB同ACCESS数据库的良好接口，实现虚拟仪器驱动器文件的存储。
2.3　操作模式
　　IDM环境为仪器驱动器提供了两种操作模式：编辑模式(Edit Mode)和实时模式(Live Mode)。前者提供给测试人员一个编辑虚拟仪器面板和虚拟控件的环境，后者则用来与真实仪器联机调试。在这里，我们设置了一个标志位VPRunMode，当环境检测到面板操作时，根据其属性设置的不同分别执行以下操作：
　　编辑模式：在此模式下，测试人员可通过菜单条与工具栏完成虚拟面板和虚拟控件的添加、放缩、移动、删除及属性设置等编辑功能，同时将向仪器库中添加或删除有关信息。
　　实时模式：此时，测试人员在虚拟面板上对控件的操作可立即实现对仪器的控制，相当于直接操作仪器，这种模式便于用户检测仪器驱动器编制的正确性。
3　流程设计环境的实现
　　按照流程式程序设计环境的要求，FDE以控件的形式提供了11种编程元素，用来实现流程控制、数据定义等功能，作为程序设计的基本“语句”，测试人员只需用这些编程元素来实现测试任务的流程思想，并按顺序运行即可完成测试要求。另外，作为一个测试软件开发环境，FDE还具有强大的数学分析、运算、数据处理及图形功能。数学分析模块可以完成数据的分析、运算，表达式的处理，波形的处理(如FFT，加窗，波形的圆滑、截取、放大等)，逻辑运算、比较等功能。图形显示模块则利用VB提供的Graph控件来完成多达11种不同的图形样式，且每种样式均有多种显示方式供选择，可以把测试结果数据按照用户的要求清晰地绘制出来。最后，FDE将自动产生一份测试报告，供测试人员对测试软件作详细分析。
　　编程元素是流程设计的基本组成部分，是构成测试程序的基本元素。通过对测试程序一般组成结构的分析，将流程设计环境的编程元素划分成11种不同类型，分别完成测试程序控制、数据定义、数据输入／输出、图形显示及仪器控制等功能。其创建过程与虚拟面板上的控件完全一样，只是属性种类不同而已。利用VB的面向对象设计技术，首先建立了10余种编程元素的基类，并为每一种元素定制了一张属性表，然后再根据测试程序的实现过程，动态派生出测试程序的组成元素。
　　测试软件自动生成技术的核心是仪器操作。在FDE中，测试人员可调用有IDM环境开发的仪器驱动器，以完成测试代码的自动生成。另外，考虑到在一些测试系统中有可能用串口仪器，还提供了对I／O口的直接控制，利用它用户还可对GPIB接口进行操作，如接口清除(Clear)、远控(Remote)、本地封锁(Llockout)等，对仪器程控代码熟悉的用户，也可通过它来直接控制仪器。
　　用户在FDE中编制的测试软件由“工作文件”来管理。它事实上是一个数据库文件，内含12张表，用以存储测试软件中可视化编程元素的信息，如表1所示。这些表通过一些公共的关键字段构成相关关系，利用它们构成的索引，可完成对测试软件组成部件的定位。实现流程运行的过程是：运行库函数,从测试程序的组成元素表中按Turn的顺序依次选出相应执行元素(注释为非执行元素)，再按每个元素的具体运行属性来执行相关操作，从而完成测试程序的执行。它的基本设计思想类似解释性语言开发环境，具体如下：
表1

表名存储信息
Workfiles用户测试软件信息
Component测试软件各组成元素属性
Conditions条件变量的初值、终值、步长等
Driver仪器的操作信息
Graph图形的显示属性
Variable用户软件中的变量和常量
Subs各组成子程序信息
ImportData子程序间的变量引用关系
Table测试结果表格属性
Waveform数组名称及各元素值
CWaveform多维数组和复数的名称及值
Lines指标程序运行的连线信息

　　1)运行前先判断当前测试程序中是否还嵌套下级子测试程序，如有，则先记录关于此嵌套子测试程序的Subid信息；
　　2)打开GPIB卡；
　　3)调用R-2Component()函数，运行当前记录集中的Turn值最小的编程元素；
　　4)根据R-Component()函数返回值，作下一步操作：
　　.若R-Component()函数返回值为NOERROR，则重复第三步；
　　.若R-Component()函数返回值不为0，则表示运行出错，FDE给出出错信息后返回；
　　.若R-Component()函数返回值为FEND，则表示流程运行结束，VATE给出“正确运行”信息后退出。
　　关于分支和循环的实现也与此类似，区别之处在于当运行rsp记录集之前，环境根据条件变量的实际运行值作出相应处理。有关运行库函数的总体流程图如图2所示.


图2　运行库函数流程图
4　结论
　　本文实现的VATE是一个通用的自动测试软件开发平台。它利用当今先进的计算机软件技术，通过构筑虚拟仪器驱动器技术实现对真实仪器的控制，并采用流程设计方法，完成特定测试软件的可视化生成。实践表明：与传统自动测试系统组建方法相比，它不仅简单易用，而且可以缩短开发时间3～4倍，因此，对自动测试技术的发展具有积极的意义。
作者简介:陈大港　24岁　男　博士研究生
作者单位:电子科技大学自动化系，四川省成都市，610054
参考文献
　　1　陈光,李为民等.计算机辅助测试(CAT)工作站的实现.电子学报,1993,21(11)
　　2　顾亚平.自动测试软件.北京:电子工业出版社,1990
　　3　Hewlett-Packard,HPVEE Visual Engineering Envi-
ronment Technical Data,1993
　　4　James Truchard J.Software Technology for Automa-
ted Measurements.IEEE Instrument and Measurement Tech Conference,1989
　　5　Donald Zrudsky R and James Pickler M.Virtual Instrument for Instantaneous Power Measurement.IEEE Transaction on Instrumentation and Measurement,1992,41(4)
1999-03-17收稿
