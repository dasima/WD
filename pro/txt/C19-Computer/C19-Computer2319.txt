计算机研究与发展
JOURNAL OF COMPUTER RESEARCH AND DEVELOPMENT
1999　Vol.36　No.6　P.695-704



ND-Polya类比实现技术
摘　要：从认识论和方法论的角度来看，分类不是认识事物解决问题的唯一方法，类比同样十分重要.然而传统的继承只体现分类的方法.自行设计的面向对象语言ND-Polya通过引入新的继承机制――柔性继承来支持类比方法.使用柔性继承机制，程序员能以描述事物或问题间相似性的方式进行软件开发.文中简要介绍了ND-Polya的柔性继承设施，并在此基础上具体地讨论了该机制的类比实现技术.
关键词：柔性继承，ND-Polya，类比，实现
分类号：TP311
THE IMPLEMENTATION TECHNIQUES OF 
THE ANALOGY IN ND\|POLYA
MA Xiao-Xing，TANG Bao，TAO Xian-Ping，YI Bo，Lü Jian
(State Key Laboratory for Novel Software Technology,Nanjing University,Nanjing 210093)
(Institute of Computer Software,Nanjing University,Nanjing 210093)
Abstract：Analogy is a very important method for cognition and solving problems besides classification in the view of epistemology and methodology. However, the traditional inheritance only reflects the idea of classification. The ND-Polya language supports the analogy in object-oriented programming by providing a new inheritance mechanism――soft-inheritance, with which one can develop a new software system by describing its similarity to an existing system. After giving a brief introduction to the soft-inheritance facilities in the self-designed language ND-Polya, the implementation techniques of the soft-inheritance are discussed in detail.
Key words：soft-inheritance, ND-Polya,analogy,implementation▲
1　引　　言
　　所谓类比是指思考者带着某种意图去考察对象间或系统间的相似性.这里的意图就是希望把相似处化为明确的对应关系，并且希望这种对应关系能帮助我们理解或解决所关心的问题［1］.类比是认识世界的重要方法，也是解决问题的有效手段，它与分类方法一起构成认识论中不可分割的两个方面［2］.
　　继承是支持面向对象风范的核心机制之一，它不但构成了多态对象计算的基础，还为代码复用提供了有效的途径.然而，现有面向对象语言的继承机制是机械的、硬性的继承，它在概念上体现的是分类分析方法，而不能支持认识论中同样也很重要的类比方法.当人们使用类比来考察新事物解决新问题时，就复用了旧事物的概念和旧问题的解决方法，但是这种复用复用的是已有概念或已有方法的某种抽象，而不是其本身，也就是说，复用了其高阶特征.现有的继承机制对此无能为力.
　　为此，我们以类比理论和方法为基础，提出了一种新型的继承机制――柔性继承机制.采用这种新型的柔性继承机制，可在面向对象语言里通过描述当前类与另一已实现的类之间的相似性和相异性的方式来定义新类，而由机器通过类比分析和类比推导来（部分地）自动生成这个新类的实现，从而得到对源类性质及代码的复用.这样就将类比程序设计的思想应用于面向对象程序设计方法，从而提高了复用的层次和深度.
　　ND-Polya是我们设计的一个面向对象语言，它提供了一组支持类比的柔性继承设施，用户可使用它们来描述目标类与源类的相似性，然后由系统进行类比分析和类比推导，自动完成该类的实现.关于柔性继承的概念和ND-Polya语言的设计将另文详细讨论，本文只对其作简要介绍.柔性继承机制是一种新的语言机制，其类比实现技术的研究是一个十分困难的问题.本文工作的重点主要是基于我们在对类比理论和方法多年研究成果［2～5］，提出了一种基于类的“商结构”的类比推理方法，通过这个方法，我们不但可以支持不同应用领域间的类比，还可以通过类比来解决比原问题更复杂的类似问题，较好地实现了ND-Polya语言所提供的柔性继承机制.
2　ND-Polya中的类比设施
　　对两个对象相似的一种基本的理解是其某些属性（关于对象的一元或可化为一元的谓词）相似.同样，描述两个类相似，要描述其特征（包括属性和程式）的相似性.在类比形式理论中对象属性的相似常常简单地用同名谓词来表达，而两个相似类可能针对不同领域的不同问题，不但其相似特征可能不同名，其相似的方式也多种多样.例如，长方体与长方形可以类比，但长方形的顶点是二维点而长方体的顶点是三维点；若将原子结构系统与恒星星系系统类比，则原子中的电子与星系中的行星相似，其相似的方式是电子因其所带电荷而受电荷引力的作用，而行星因其质量而受万有引力的作用.我们提供了两个关键字as和where来描述相似特征及其相似方式.上述第二个例子可表达为：
　　class 原子结构系统 ～ 恒星星系系统 {
　　　　　电子类型 电子 as 行星类型 行星 where{ 电子.电量 ～行星.质量};
　　　　　……
　　}
在这里，我们实际上已放宽了传统继承不能在子类中重定义属性的限制.
　　Gentner认为［6］：在类比中，系统中的关系比属性重要得多.因为属性是孤立的、表面的性质，关系则是系统中的结构，类比主要建立在关系的相似上.进而，刻画关系与关系间依赖的高阶关系更能揭示系统的内在本质，它往往反映系统的动态特征，因而在类比中尤为重要.所以，仅描述两个类的（部分）特征之间的相似是不够的，应该在两个类的逻辑结构之间建立明确的对应关系.例如平面上的点(2DP)和空间上的点(3DP)类似，可以建立2DP和3DP之间的类比对应：首先，2DP中的x,y相似，应划为一组，同样3DP中的x,y,z相似，也划为一组，而在这两个组之间建立对应.对应地，move的参数也要划为一组，…….这样，我们就有图1的对应.从这个例子可以看出，我们在建立对应前将类中相似的属性划分成组，从而将类的平面的、具体的结构转换为一种抽象的“商”结构，这种商结构在某种程度上体现了类中各特征间高阶逻辑关系.如果在两个类的商结构之间建立了同构关系，则我们就认为它们之间就建立了良好的类比对应.Gentner结构映射(structure mapping)的系统性原理(systematicity principle)指出，在高阶关系联系下的关系移植到靶系统中具有较高的可信度.我们在同构的商结构下推导出的方法体代码也应具有较高的正确性.


图　1
　　那么，怎样得到类的商结构或者说用户如何向系统提供属性分组的信息呢？我们在Polya中提供了3种手段来描述分组信息.第1种方法是一种程序行文上的暗示，例如上述2DP类中的x和y在变量说明时写作　　
　　int x, y;
而不写作
　　int x;
　　int y;
另一方面,不是同组的同类型变量不应在同一条变量说明语句中说明.这实际上是一种良好的程序书写风格.第2种方法用于方法声明的形式参数表中参数的分组，我们用逗号来分隔各个参数，而用分号来分隔不同的组.第3种方法用于说明新增属性与其它属性的相似性，例如，在上述3DP类中对z的说明应写作：
　　int z like x,y;
这条语句在声明一个新变量z的同时指出了z与x及y相似，应划为一组.
由于进行类比的两个类未必在所有方面都相似，有时我们只需要进行部分类比，此时就应该在（柔性）继承时隐藏源类的某些域，使某些属性和方法不复可见：
　　discards SomethingNotNeeded;
　　用户通过上述手段描述源类与目标类之间的相似性，系统利用这些信息在两个类之间建立类比对应关系，并通过类比推理自动完成类比方法的实现.例如上述3DP中的move方法只需作如下声明即可：
　　3DP move(int dx,int dy,int dz) from 2DP move(int dx,int dy);
而move方法的具体实现即其代码由系统经类比推导得出.更加具体的例子请参见附录.
　　在这里，用户根据他对现实世界事物相似性的认识来定义源类与目标类之间的相似性，因而原则上他自己需对类比的合理性负责.而柔性继承机制将负责检查用户所提供的类比信息是否矛盾（将导致某些类比对应无法建立，或者推导出的代码有类型错误）以及类比信息是否充分（足以进行类比推导）.当类比信息不充分或者有矛盾时，系统将提示用户进一步考察类比是否合理，他对类比的描述是否恰当、完整.
3　系统实现
　　我们的整个系统集成了ND-Polya编辑器，从Polya到Java的翻译系统和Java的编译、解释运行系统.其中翻译系统是关键，类比推理的工作就是在其中实现的.在两个类之间进行类比包含两方面的工作：首先，要精确定义两个类之间的相似关系，也就是从（部分）结构的类比对应得出完整结构的类比对应，这属于类比分析；然后将源类（基系统）的性质通过类比对应移植到目标类（靶系统）中，从而得到目标类的实现，也就是类比推导.用户提交的Polya源程序同它用到Java类比源程序结合成为完整的Polya源程序提交给分析器，经语法分析和类比分析生成一棵附有类比信息的语法树，再由推理器进行论域转化和扩展推理，生成新的语法树，最后整理成Java程序输出.这个翻译系统的总体结构如图2所示.


图　2
3.1　语法分析与类比分析
　　在进行类比推导之前，首先要对ND-Polya源程序进行语法分析和类比分析.在这一过程中，我们完成了下列工作：
　　(1) 依据我们设计的语言，利用成熟的编译技术，在Lex和YACC等工具的辅助下编制词法分析和语法分析程序，对源程序进行扫描和识别，排除词法错误和一些简单的语法错误，同时自底向上地建立起一棵语法树.
　　(2) 创建符号表.对语法树中的各标识符予以解释――即将其联系于符号表相应项从而进一步联系至其在语法树中的定义点；进一步排除诸如标识符无定义之类的错误.这一步的工作依据语法树自顶向下递归下降地进行.
　　(3) 在对标识符进行解释的同时，进行类比信息的收集和分析，包括源类与目标类之间特征的相似对应关系、属性的分组信息和组之间的相似对应关系.此时可以排除部分类比信息矛盾错误.值得注意的是，类比信息也是有作用域的，因而它们的存放也应依附于语法树的嵌套层次结构.
　　(4) 静态类型检查.除了要作一般的静态类型检查外，我们还要作类比类型相容性检查，主要是检查as子句的类型相容性.如果当前类中声明类型为B的属性t相似于源类中类型为A的某属性s，则要求B与A（类比）相容，即凡程序中通过s引用的A的属性或方法在B中均有其明确的对应物（保证下面的类比推理有足够的类比对应信息）.这有如下几种情况：①某些简单类型具有相同的方法，如实数类型的加法和整数类型的加法；②有继承关系的两个类中的同一属性或方法（可能已重定义）；③使用where子句显式说明了的对应的属性或方法. 
　　现在，我们得到了一棵已充分解释的语法树以及依附其上的类比信息表，接下来就可以进行类比推理，以得到所需目标类的实现.
3.2　类实现的类比推理
　　为了得到所需目标类的实现，我们首先复制一份源类的语法树，然后依据类比信息进行推理，将它转化为目标类的完整的语法树.这个工作分为两步进行：论域转换和扩张推理.
3.2.1　论域转换
　　进行类比的源类和目标类所描述的问题可能属于不同的领域.如果把整个类比作一个代数系统，那么源类与目标类就具有不同的“论域”.把类的语法树从源类的“论域”（称为基域）变换到目标类的“论域”（称为靶域）的工作我们称之为“论域转换”.
　　论域转换的主要工作是换名，可依据语法树递归下降地进行.每深入一个语法层次，首先将联系于本语法节点的类比信息表（如果有的话）与从上一语法层次继承下来的有效类比信息表合并，形成当前有效类比信息表；然后对本节点的各语法成分递归地进行换名，直至可根据当前有效类比信息表直接决定如何处理的单个标识符.
　　对语法树换名的同时也就破坏了其原有的类型体系.必须保证新语法树无类型错误.若此时发现类型错误则说明类比不当，其原因可能是用户使用where子句所指定的类比对应本身有类型矛盾，应报告用户.
　　这一步有一个棘手的问题：如何处理临时变量的类型？一种办法是在编写源类的语言中引入Eiffel语言中的“like”机制（不同于上文所述的like），要求把临时变量的类型联系于非临时变量（这也是一种良好的程序风格）.但由于Java中并无这种机制，我们决定采用另一种方法，就是依据某些表达式对该临时变量的类型进行猜测，以使得这些表达式类型匹配.如果猜测的结果使得本段程序无类型错误，我们就认为猜测成功了.虽然猜测不一定能成功，成功了也不能保证绝对正确，但在大多数情况下是能猜出正确的类型的.
　　到这一步为止，我们的系统已具备相当的类比推理能力，能从源类推导出（直接）同构的目标类，其效果有些类似于一般语言中的模板/类属机制，然而与之相比，类比机制有下列优点：
　　(1) 类比机制不要求事先抽象.模板机制要求在使用之前已经对相似的类或方法作出抽象，并写成模板的格式.而在实际的编程实践中，人们常常是在解决新问题时才发现其与已知问题类似，可以复用已有代码，然而此时人们又不愿意特地编写一个模板了.
　　(2) 与模板机制相比，类比机制概念更深刻，功能更强大.例如，类比机制不但可以换掉一个类的某属性的类型，而且还能换掉该属性（作为一个对象）的属性和方法（通过where子句），这是模板机制所难以做到的.
　　(3) 类比机制不仅能推导出与源类直接同构的目标类，更重要的是它能通过扩张推理推导出与源类在商结构下同构的目标类，从而解决更复杂的问题.下面我们就来讨论扩张推理.
3.2.2　扩张推理
　　在进行类比时，当前面临的问题往往比已知的问题要来得复杂.前文指出我们的类比是建立在商结构同构的基础上的，这样新问题的复杂性就表现为目标类的属性的组比与其相似对应的组扩大了.例如第2节中空间的点与平面的点类比的例子中，3DP的属性组〈x,y,z〉就比2DP中相应的属性组〈x,y〉扩大了.在这种情况下，要得到目标类的实现就必须对相关代码进行相应的变换.当有多个组相互作用时，问题变得比较复杂.下面我们较详细地讨论对代码进行扩张的算法.
　　扩张在语法树上进行.为了方便叙述，先引入一些概念：
　　(1) 对等子树
　　①语法树同构： 叶节点与叶节点同构.语法树T(T1,T2,…,Tn) 与S(S1,S2,…，Sn)同构当且仅当T与S 为相同语法结构且Ti与Si同构(i=1,2,…,n);
　　②线性表示： 一棵语法树S可看作是施于其所有叶节点上的某种操作.若用OPs表示该操作(同构的语法树看作是同样的操作)，则S可表示为：
OPs(n1,n2,…,nk)，
其中n1,n2,…,nk为先根遍历S依次遇到的叶节点.易知，该表示是唯一存在的.
　　③对等：同构子树OP(n1,n2,…,nk)与OP(m1,m2,…,mk)对等当且仅当ni与mi(i=1,2,…,k) 满足下例条件之一：
　　1) 相同.
　　2) 均为常量，且类型相容.
　　3) 均为局部变量，且类型相同.
　　4) 均为同一组中之非新增变量.
　　5) 均为与各组均无关的非局部变量.
显然，子树间的对等关系是一种等价关系.它实际上体现的是代码间一种基于组内变量相似关系的“对称”的关系.
　　(2) 扩张的基
　　① 组扩张的基：若某几个变量恰好为(不重复，不遗漏)某一个组G的全部非新增变量，称其为该组扩张的基.
　　② 子树扩张的基：子树
　　　　　　　　　　　　　OP1(n11,n12,…,n1k);
　　　　　　　　　　　　　OP2(n21,n22,…,n2k);
　　　　　　　　　　　　　……
　　　　　　　　　　　　　OPs(ns1,ns2,…，nsk);
　　若同时满足下列条件则构成一子树扩张的基： 
　　1) 其中任意两棵子树对等.
　　2) 若nit(1≤i≤s,1≤t≤k) 为某一组G中之变量，则对于所有的j (j=1,2,…,s)，诸njt均相同或它们恰好构成组G扩张的基.
　　3) 至少存在一个t(1≤t≤k), 诸njt(j=1,2,…,s)不是局部变量，并恰好构成某组G扩张的基.
　　4) 若存在r(1≤r≤k), 诸njr(j=1,2,…,s)均为局部变量，则它们要么全部相同，要么两两不同，在后一种情况下隐含定义了一个组,这些局部变量构成该组扩张的基，而该组扩张的新变量将也是新的局部变量，其个数等于非局部变量组需扩张的变量个数.
　　5) 若存在r,t(1≤r<t≤k), 诸njr为组G1扩张的基, 诸njt为组G2扩张的基，则G1与G2中需扩张的变量个数应相同.
　　6) 若存在r,t(1≤r<t≤k), 诸njr(j=1,2,…,s), 诸njt(j=1,2,…,s)为同一组G扩张的基，则有
njr=njt, (j=1,2,…,s).
　　所谓子树扩张的基实际上乃是代码中待扩张的合适的对称结构，条件1到条件6保证它对于一次扩张来说既是完整的又是最小的.
　　现在来讨论如何扩张.由于我们大量的操作在不同子树的对应叶节点间进行，而语法树的结构很不适合这样的操作，所以我们先要将子树变换为其线性表示（线性化），实现上用一个指针数组指向该子树的所有叶节点.我们的算法总体上还是依据语法树递归地进行，只是这里要按照深度优先的顺序，即先扩张小的语法单元，后扩张大的语法单元.每到达一个可扩张的语法层次（节点），首先将各同构的语法子树分别线性化，组成一个索引矩阵，然后在这个矩阵里查看是否有待扩张的基.每找到一个子树扩张基
OP1(n11,n12,…,n1k);
OP2(n21,n22,…,n2k);
……
OPs(ns1,ns2,…，nsk);
就一次扩张出子树
OPs+1(ns+11,ns+12,…，ns+1k);
……
OPr(nr1,nr2,…，nrk);
扩张的规则是：
　　① 每个新扩张出的子树均对等于原来的子树.
　　② 若诸njt(j=1,2,…,s)相同，则诸njt(j=1,2,…,r)相同，否则
　　③ 若诸njt(j=1,2,…,s)恰好构成某组G扩张的基，则诸njt(j=s+1,s+2,…,r)恰为G中所需扩张的变量，否则
　　④ 若诸njt(j=1,2,…,s) 均为局部变量，则诸njt(j=s+1,s+2,…,r)亦为新的局部变量，否则
　　⑤ 若诸njt(j=1,2,…,s)均为与诸组均无关之全局变量，则诸njt(j=s+1,s+2,…,r)亦为全局变量，否则
　　⑥ 诸njt(j=1,2,…,s) 均为常量，则诸njt(j=s+1,s+2,…,r)亦为常量（常量的值可能需要提示用户决定）.
并将新扩张出的子树不重复地插入索引矩阵和本语法节点.继续以上步骤，直至所有待扩张的基均已扩张完毕.
3.3　整理输出
　　最后，将推导出的语法树还原为Java源程序输出.我们设计了一组语法制导的规则来控制相应语法成分的换行与缩进，使得输出的程序呈现出一种锯齿状的风格，满足了易于阅读的要求.
4　结　　语
　　本文简要讨论了类比模型语言ND-Polya中支持柔性继承的类比语言设施，并较详细地给出了其实现技术.我们已经用C++在SUN Solaris上实现了ND-Polya，并通过了一些实例，其中包括从一个平面图形旋转变换系统类比得到了立体图形旋转变换系统（可参见附录）.
　　通过这个实践，我们认为通过类比推导实现的柔性继承是一种灵活的代码复用机制，同时它体现了类比程序设计这种新的程序设计的思想和方法，具有相当的应用前景.
　　使用ND-Polya语言进行类比程序设计，除了可以直接复用一些原来难以复用的概念和代码外，还有一个潜在的好处：若发现某些代码多次被作为类比源的话，就可以将其总结为模板、框架或者设计模式，这有可能形成一种自动生成模式的途径.这一问题值得继续研究.
附 录
　　在这个例子中，我们已有了一个可进行平面模型的平移、旋转等变换的系统(图3)，而现在要开发一个用于立体模型的变换的系统(图4).根据我们的几何知识，二维空间和三维空间具有许多相似的性质.这就启发我们去复用已有系统的思想和代码.进一步，从程序设计和计算机图形学的角度分析，这两个系统应具有相似的结构和相似的关键算法（用齐次矩阵的乘法来进行复合变换）.然而，尽管两个系统从结构到算法思想都很相似，传统的机械的代码复用方法（继承、类属等）在这里却无能为力.而使用类比的思想，利用柔性继承的手段，我们可以灵活地复用已有的程序，方便地开发出所需的三维的模型旋转变换系统.下面就是使用我们的语言开发的这个程序的部分节录.首先是原有的二维系统，接下来是类比开发的三维系统，最后是推导出的部分Java程序.
//平面点及其平移旋转变化等
class Point {
　　float x, y;
　　void move(float dx, float dy) {
　　　x += dx;
　　　y += dy; }
　　float distance(Point p) {
　　　return (float)Math.sqrt((x-p.x)*(x-p.x) + (y-p.y)*(y-p.y)); }
　　//绕原点旋转：
　　void rot(double theta) { 
　　　theta *= (3.14159 / 180);
　　　double ct = Math.cos(theta);
　　　double st = Math.sin(theta);
　　　float Ny =(float)(y*ct+x*st);
　　　float Nx =(float)(x*ct-y*st);
　　　x = Nx;
　　　y = Ny; }
　　//略去一些方法
　　……
}
//用于平面模型变换的齐次矩阵及其乘法等：
class Matrix {
　　Point po, px, py;
　　//旋转
　　void rot(double theta) {
　　　po.rot(theta);
　　　px.rot(theta);
　　　py.rot(theta); }
　　//用于平面复合变换的齐次矩阵乘法:
　　void mult(Matrix2D rhs) {
　　　Point lx=new Point(),ly=new Point(); 
　　　Point lo=new Point;
　　　lx.x = px.x * rhs.px.x + px.y * rhs.px.y ; 
　　　ly.x = py.x * rhs.px.x + py.y * rhs.px.y ;
　　　lo.x = po.x * rhs.px.x + po.y * rhs.px.y ;
　　　lo.x += rhs.po.x;
　　　lx.y = px.x * rhs.py.x + px.y * rhs.py.y ;
　　　ly.y = py.x * rhs.py.x + py.y * rhs.py.y ;
　　　lo.y = po.x * rhs.py.x + po.y * rhs.py.y ;
　　　lo.y += rhs.po.y;
　　　px.x = lx.x;
　　　py.x = ly.x;
　　　po.x = lo.x;
　　　px.y = lx.y;
　　　py.y = ly.y;
　　　po.y = lo.y; }
　　//略去一些方法
　　…… }
class Model{
　　//使用Point和Matrix实现平面模型及其旋转等功能.
　　…… }
class TwoD extends Applet {
　　//显示平面模型变换效果.
　　…… }

//****************************

//从二维点类比出三维点：
class Point3D ～ Point {
　　float z like x,y;
　　……
　　void move(float dx, float dy, float dz) as move(float dx, float dy);
　　　　void distance(Point3D p) as distance(Point p);
　　//三维空间旋转有三个维度，各以不同的类比方式从二维空间旋转方法类比得到
　　void roty(double theta) from rot(double theta) where{ x, z ～ Point.x, Point.y };
　　void rotx(double theta) from rot(double theta) where{ y, z ～ Point.x, Point.y }; 
　　void rotz(double theta) from rot(double theta) where{ x, y ～ Point.x, Point.y }; 
　　…… }
//从二维齐次矩阵类比出三维矩阵及其关键算法： 
class Matrix3D ～ Matix {
　　Point3D po,px,py as Point po,px,py where { x, y, z ～ x, y };
　　void rotx(double theta) from rot(double theta) where { Point3D.rotx() ～ Point.rot() };
　　void roty(double theta) from rot(double theta) where { Point3D.roty() ～ Point.rot() };
　　void rotz(double theta) from rot(double theta) where { Point3D.rotz() ～ Point.rot() } ;
　　//此处同样仅需一个类比声明就可完成 三维齐次矩阵乘法： 
　　void mult(Matrix3D rhs) from mult(Matrix2D rhs) 
where { Point3D.x,Point3D.y,Point3D.z ～ Point.x,Point.y };
　　…… }
class Model3D ～ Model {　　 //略... 　　　 }
class ThreeD ～ TwoD { 　　 //略... 　　　 }
下面是类比推导出的Point3D和Matrix3D的部分结果：
class Point3D extends java.lang.Object
{
　　float x, y, z;
　　... ...
　　void move(float dx,float dy,float dz)
　　{
　　　x+=dx;
　　　y+=dy;
　　　z+=dz;
　　}
　　float distance(Point3D p)
　　{
　　　return (float)Math.sqrt((x-p.x)*(x-p.x)+(y-p.y)*(y-p.y)+(z-p.z)*(z-p.z)) ;
　　};
　　void roty(double theta)
　　{
　　　theta*=(pi/180);
　　　double ct=Math.cos(theta);
　　　double st=Math.sin(theta);
　　　float Ny=(float)(z*ct+x*st);
　　　float Nx=(float)(x*ct-z*st);
　　　x=Nx;
　　　z=Ny;
　　}
　　//rotx ， rotz 与 roty 类似、，为节省篇幅，此处略. 
}
class Matrix3D extends java.lang.Object
{
　　Point3D po=new Point3D(), px=new Point3D(), py=new Point3D();
　　void roty(double theta)
　　{
　　　po.roty(theta);
　　　px.roty(theta);
　　　py.roty(theta);
　　　pz.roty(theta);
　　}
　　//rotx ， rotz 与 roty 类似，为节省篇幅，此处略.
　　//这就是推导出的三维齐次矩阵乘法：
　　void mult(Matrix3D rhs)
　　{
　　　Point3D lx=new Point3D(), ly=new Point3D(), lxnew0=new Point3D();
　　　Point3D lo=new Point3D();
　　　lx.x=px.x*rhs.px.x+px.y*rhs.px.y+px.z*rhs.px.z;
　　　ly.x=py.x*rhs.px.x+py.y*rhs.px.y+py.z*rhs.px.z;
　　　lo.x=po.x*rhs.px.x+po.y*rhs.px.y+po.z*rhs.px.z;
　　　lo.x+=rhs.po.x;
　　　lx.y=px.x*rhs.py.x+px.y*rhs.py.y+px.z*rhs.py.z;
　　　ly.y=py.x*rhs.py.x+py.y*rhs.py.y+py.z*rhs.py.z;
　　　lx_new0.x=pz.x*rhs.px.x+pz.y*rhs.px.y+pz.z*rhs.px.z;
　lx.z=px.x*rhs.pz.x+px.y*rhs.pz.y+px.z*rhs.pz.z;
　lx_new0.z=pz.x*rhs.pz.x+pz.y*rhs.pz.y+pz.z*rhs.pz.z;
　ly.z=py.x*rhs.pz.x+py.y*rhs.pz.y+py.z*rhs.pz.z;
　lx_new0.y=pz.x*rhs.py.x+pz.y*rhs.py.y+pz.z*rhs.py.z;
　　　lo.y=po.x*rhs.py.x+po.y*rhs.py.y+po.z*rhs.py.z;
　　　lo.z=po.x*rhs.pz.x+po.y*rhs.pz.y+po.z*rhs.pz.z;
　　　lo.y+=rhs.po.y;
　　　lo.z+=rhs.po.z;
　　　px.x=lx.x;
　　　py.x=ly.x;
　　　po.x=lo.x;
　　　px.y=lx.y;
　　　py.y=ly.y;
　　　pz.x=lx_new0.x;
　　　px.z=lx.z;
　　　pz.z=lx_new0.z;
　　　py.z=ly.z;
　　　pz.y=lx_new0.y;
　　　po.y=lo.y;
　　　po.z=lo.z;
　　}
... ...
Point3D pz=new Point3D();
}
... ...

图3　平面模型的旋转

图4　立体模型的旋转
　　致谢　感谢ND_Polya课题组其他同学的精诚合作.他们是：柳杨、王筱瑾、路鹏.■
基金项目：本课题得到国家自然科学基金(项目编号69473038)、国家杰出青年科学基金(项目　　　　　　编号61525204)和江苏省青年基金(项目编号BQ96005)资助.
作者简介：马晓星，男，1975年8月生，硕士研究生，主要研究方向：面向对象应用框架和设　　　　　　计模式.
　　　　　唐宝，男，1974年5月生，硕士研究生，主要研究方向：并发面向对象语言.
　　　　　陶先平，男，1970年3月生，博士研究生，讲师，主要研究方向：软件自动化、流　　　　　　动Agent技术.
　　　　　伊波，男，1958年11月生，副教授，主要研究方向：类比理论、软件自动化.
　　　　　吕建，男，1960年10月生，教授，博士生导师，南京大学软件新技术国家重点实验　　　　　　室主任，中国计算机学会理事，研究领域：软件自动化及形式化、面向对象语言及
　　　　　环境.
作者单位：马晓星（南京大学计算机软件新技术国家重点实验室　南京　210093）
　　　　　唐宝（南京大学计算机软件新技术国家重点实验室　南京　210093）
　　　　　陶先平（南京大学计算机软件新技术国家重点实验室　南京　210093）
　　　　　伊波（南京大学计算机软件新技术国家重点实验室　南京　210093）
　　　　　吕建（南京大学计算机软件新技术国家重点实验室　南京　210093）
　　　　　马晓星（南京大学计算机软件研究所　南京　210093）
　　　　　唐宝（南京大学计算机软件研究所　南京　210093）
　　　　　陶先平（南京大学计算机软件研究所　南京　210093）
　　　　　伊波（南京大学计算机软件研究所　南京　210093）
　　　　　吕建（南京大学计算机软件研究所　南京　210093）
参考文献：
［1］伊波，徐家福.类比推理综述.计算机科学，1989，16(4)：1～8
(Yi Bo,Xu Jiafu.A survey on analogy reasoning.Computer Science (in Chinese),1989,16(4):1～8)
［2］伊波，徐家福.类比模型和类比对应.中国科学(A辑)，1992，22(1):87～93
(Yi Bo,Xu Jiafu.Analogy mode and analogy correspondence.Science in China (A) (in Chinese),1992,35(3),374～384)
［3］Yi Bo,Xu Jiafa.Analogical type theory.Symbolic Computation,1995,19(1):3～244Yi Bo,Xu Jiafu.Analogy calculus.Theoretical Computer Science,1993,113(2):211～230
［5］Lü Jianguo, Xu Jiafu.Analogical program derivation based on type theory.Theoretical Computer Science,1993,113(2):259～272
［6］entner D.Structure mapping:A theoretical framework for analogy.Cognitive Science,1983,7:155～170
收稿日期：1998-08-19
修稿日期：1998-11-23
