软件学报
JOURNAL OF SOFTWARE
1999年 第19卷 第3期  Vol.19 No.3 1999



函数式语言中的赋值语句
石跃祥　袁华强　孙永强　陈静
摘　要　文章探讨了怎样在纯函数式语言中加入赋值操作，而又不丧失引用透明性特征的问题，给出了这些操作的指称语义，并用这些赋值操作定义了一个简单的命令式语言的解释程序.
关键词　纯函数式语言,赋值语句,Monads.
中图法分类号　TP312
Assignments for Pure Functional Languages
SHI Yue-xiang　YUAN Hua-qiang　CHEN Jing
　Department of Computer Science Xiangtan University Xiangtan 411105
SUN Yong-qiang
　Department of Computer Science and Engineering Shanghai Jiaotong University Shanghai 200030
Abstract　 In this paper, the authors show that assignments can be incorporated into pure functional languages without loss of referential transparency. And the denotational semantics of these assignment operations are given. Using these assignment operations, the authors define an interpreter of a simple imperative language.
Key words　Pure functional languages, assignments, Monads.
　　怎样在纯函数式语言中加入赋值语句,而又不丧失引用透明性特征,一直是函数式语言学界关注的焦点.人们在这方面提出了一系列的方法,这些方法大都是基于类型系统的,而且类型系统十分复杂,没有被人们广泛接受.文献［1］运用Monad方法［1～3］，将赋值语句加入到纯函数式语言中,避免了人们以往采用的复杂的类型系统.但是,文献［1］提出了一个异步的I/O操作performIO,这个操作与引用透明性是相冲突的.本文针对这一缺陷,采用状态转换器以及对状态进行参数化的方法进行改进,使得在纯函数式语言中加入赋值语句，而又不丧失引用透明性特征,并给出了这些赋值操作的指称语义,用这些赋值操作定义了一个简单的命令式语言的解释程序.
1　状态转换器
　　定义1.1. 状态转换器ST是这样的函数,它作用在一个类型为s的初始状态上,返回一个类型为a的值和一个类型仍为s的结束状态.
这样,状态转换器ST的类型可定义为: type ST s a=state s->(a,state s)
　　最简单的状态转换器unitST,它仅仅传递值,丝毫不影响状态:
　　unitST∷a->ST s a
　　unitST x=＼s->(x,s),其中＼s->是一个λ表达式.
　　状态转换器能够顺序组合,以构成更大的状态转换器,这个工作由bindST来完成:
　　bindST∷ST s a->(a->ST s b)->ST s b
　　m‘bindST’ k=＼s->let (x,s′)=m s
　　　　　　　　in k x s′
　　定理1.1［3］. (ST,unitST,bindST)构成了一个Monad.
2　对状态进行参数化
　　在文献［1］中,对赋值语句的处理采用了文献［4］的可赋值引用类型Ref a,其中IOa是一种Monad:
　　newVar∷a->IO(Ref a)
　　assignVar∷Ref a->a->IO ()
　　deRefVar∷Ref a->IO a
　　文献［1］提出了一个异步的I/O操作performIO,这个操作与引用透明性是相冲突的.
　　performIO∷IO a->a
　　performIO m=case (m newWorld) of
　　MkIORes r w′->r
　　让我们来看下面的例子:
　　let v=performIO(newVar true)
　　in performIO(deRefVar v).
　　这样做将蕴涵着一个错误,因为v是由newVar true生成的,执行performIO之后,v被释放到了外部世界,该程序不能控制在读操作deRefVar v之前,有其他操作对v进行了修改,程序的结果将依赖于计算的顺序,引用透明性特征因此丧失.
　　 在以往的IO a类型中,状态隐含在IO类型,外界不能直接对状态进行操作.为了改正文献［1］的错误,我们将IO类型中的状态显式地表示出来,改进为ST s a,使得状态成为ST的一个参数,我们称之为对状态进行参数化.与文献［4］一样,我们将状态处理为引用变量的地址到值的映射的集合,将类型Ref a改进为MutVar s a,它表示引用变量是从类型为s的状态中分配而来,并包含有类型为a的值.因此,文献［1］的引用变量的3个基本操作可改进为
　　newVar∷a->ST s (MutVar s a)
　　readVar∷MutVar s a->ST s a
　　writeVar∷MutVar s a->a->ST s ()
　　这样,通过状态转换器和对状态进行参数化,我们就可以定义我们的异步I/O操作performIO:
　　performIO∷