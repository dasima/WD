计算机研究与发展
JOURNAL OF COMPUTER RESEARCH
AND DEVELOPMENT
1999年 第36卷 第12期 Vol.36 No.12 1999



开放的异种对象标识及绑定机制研究
兑继英　沈卓炜　顾冠群
摘　要　随着各种分布对象计算系统的广泛使用，异构对象系统之间的互操作已成为必要.其中，COM/CORBA互操作是最为迫切的，很多CORBA产品遵照OMG组织的COM/CORBA互操作规范提供了互操作功能.然而规范中异种对象的标识及绑定机制存在问题，影响了应用程序的可移植性和互操作系统之间的互操作性.文中将互操作中异种对象的标识和绑定机制形式化地描述为异种对象标识空间的映射，在此基础上归纳出3种对象标识方法和相应的绑定语义，并提出一种开放的对象标识机制以提高应用的移植性和互操作系统之间的互操作性.
关键词　分布对象计算，COM，CORBA，互操作，对象标识，对象绑定
中图法分类号　TP393
RESEARCH ON AN OPEN FOREIGN OBJECT IDENTIFYING
AND BINDING MECHANISM
DUI Ji-Ying, SHEN Zhuo-Wei, and GU Guan-Qun
(Department of Computer Science and Engineering,
Southeast University, Nanjing 210096)
Abstract　With the wide application of different distributed object computing systems, interworking between heterogeneous systems becomes necessary. Since interworking between COM and CORBA is most urgent, many CORBA products provide interworking capabilities according to the OMG's COM/CORBA interworking specification. However, the specification has some limitations on the object identifying and binding mechanism, and these limitations make it difficult to provide portability of applications and interoperability of interworking systems. In this paper, foreign object identifying and binding mechanism is formalized as mapping between foreign object identifiers. Based on this formalization, three methods for object identifying and binding are concluded. And then, an open object identifying and binding mechanism is proposed to achieve portability and interoperability.
Key words　distributed object computing, COM, CORBA, interworking, object identifying, object binding
1　引　　言
　　各种分布对象计算系统的广泛使用使得异构对象系统之间的互操作成为必要.OMG组织的CORBA和Microsoft公司的COM/DCOM是当前分布对象模型中的两大主流，很多分布式应用同时采用了COM和CORBA［1］，用户迫切需要COM和CORBA的互操作以开发和集成系统，因此目前绝大多数CORBA产品都提供了COM/CORBA互操作的功能.
　　OMG的CORBA2.0规范及其后续版本中都制订了COM/CORBA互操作规范，其目的在于制定COM和CORBA对象之间的通信机制［2］，用于保证基于规范开发的互操作产品之间的互操作性和用户应用程序的可移植性.但是规范中的异种对象标识（identifier）和绑定（binding）机制存在缺陷，这样不同的互操作产品很可能使用不同的对象标识和绑定机制.例如，当COM客户使用CORBA对象时，IONA公司的Orbix ActiveX使用COM视图对象所在代理的名字、接口的名字和CORBA对象的标识来指定所要使用的CORBA对象［3］，而HP的ORBplus CORBA Connect则使用CORBA对象的名字来指定所要使用的CORBA对象［4］.即使两种产品都使用CORBA对象名来指定所要使用的CORBA对象，也无法保证其格式的一致性：HP的ORBplus CORBA Connect直接将CORBA对象的名字作为参数，而Orbix的COMet则使用接口的名字和CORBA对象的名字来指定CORBA对象［5］.
　　显然，对象标识和绑定机制的差异妨碍了互操作应用程序的可移植性和互操作系统之间的互操作性.此外，规范中CORBA客户和COM对象的绑定机制无法以通用映射方式实现.针对这些问题，文中对COM/CORBA互操作中的对象标识和绑定机制进行了形式化描述，归纳出3种对象标识和绑定方法，在此基础上提出一种开放的标识和绑定机制，并对其实现进行了可行性论证.
2　COM/CORBA互操作中的对象标识和绑定问题
　　在COM/CORBA互操作模型中，客户通过视图对异种对象进行访问，由桥负责两种系统之间的转换工作［2］，如图1所示.

图1　互操作模型
　　客户在使用异种对象之前需要以某种方式指明所要使用的异种对象，该问题称为对象标识.之后，系统根据客户指定的对象标识定位异种对象，创建相应的视图对象，将视图对象和异种对象联系起来并将视图对象的引用返回给客户，该问题称为对象绑定.此后，客户通过访问视图对象实现对异种对象的访问.
　　①在对象标识和绑定方面，Automation和CORBA之间的映射与COM和CORBA之间的映射基本相同，因此本文只讨论COM和CORBA的映射，结果同样适用于Automation和CORBA之间的映射.2.1　CORBA对象的标识和绑定①
　　规范中COM客户通过互操作系统提供的ICORBAFactory类工厂来绑定CORBA对象. ICORBAFactory类工厂为COM对象，代表了系统中所有的CORBA对象，其接口定义如图2所示.

图2　ICORBAFactory接口
　　CreateObject的行为包括：
　　(1)创建COM视图对象；
　　(2)创建CORBA对象并将其绑定到COM视图.方法中的factoryName参数标识了所要创建的CORBA对象的类型.规范没有规定factoryName参数的具体语义，例如，该参数可以用来表示CORBA对象类工厂的名字，也可以用来表示COM视图对象的Prog ID；
　　(3)将COM视图的引用返回给客户；
　　GetObject的行为包括：①将方法中的objectName映射为CORBA的对象引用.规范中没有指定objectName映射到CORBA的对象引用的映射规则，例如，该参数可以用来表示CORBA对象的名字，也可以用来表示已经创建了的COM视图的名字；②将CORBA对象引用绑定到已有的视图对象，将视图对象的引用返回给客户.
2.2　COM对象的标识和绑定
　　CORBA客户使用互操作系统实现的SimpleFactory类工厂来绑定COM对象.SimpleFactory类工厂是一个实现了SimpleFactory接口的CORBA对象，每个COM对象的类工厂映射为一个单独的SimpleFactory类工厂.SimpleFactory接口的定义如图3所示.

图3　SimpleFactory接口
　　规范中没有规定如何将CORBA SimpleFactory类工厂提供给CORBA用户使用.另外，规范也没有将实现CORBA SimpleFactory类工厂作为互操作规范的遵从点（compliance point）.
2.3　存在问题
　　从以上分析可以看出，规范中的对象标识和绑定机制存在以下问题：
　　(1)规范没有定义对象标识所代表的语义，因此应用程序中的对象标识在不同的互操作产品中可能会作不同的解释，从而导致应用程序无法在不同的互操作产品上移植；
　　(2)由于规范没有定义对象标识所代表的语义，因此无法针对不同的语义定义对象标识的格式，即使不同的互操作产品采用同样的标识和绑定方法，也会由于标识格式的不同而影响应用移植；
　　(3)规范中列举了两种可能的互操作实现方式：通用映射和特定于接口的映射［2］.通用映射方式下视图对象可以根据客户使用的异种对象动态生成，而CORBA视图到COM对象的绑定机制没有提供类似ICORBAFactory的接口来动态地创建COM对象，而且无法绑定已有的COM对象；
　　(4)一个互操作系统有可能需要在另一个互操作系统上创建视图对象，以上问题影响了互操作系统之间的互操作性.
3　互操作中异种对象标识和绑定机制的形式化描述
　　从规范中的互操作模型可以看出，互操作系统需要根据用户指定的对象标识来确定视图对象和异种对象.设互操作系统提供给用户使用的对象标识空间为Nc，视图对象的标识空间为Nv，异种对象的标识空间为Ns，则互操作的对象标识和绑定机制可以形式化地描述为函数f:Nc