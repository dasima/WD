计算机应用研究
APPLICATION RESERCH OF COMPUTERS
2000  Vol.17　No.1　P.29-32




软件构架在系统动态演化中的应用
汪洋　葛叶冰　李丽燕
摘 要 描述了基于软件构架的方法来实现系统的动态演化，并结合C2软件风格和一实例来展示是如何实现运行动态演化的。
关键词 软件构架 构件 连接器 C2风格
1　前言
　　运行系统在长期的运行过程中会遇到各种各样的变化，如硬件的更换、损坏，网络性能的变化，服务的变化，需求变化以及功能实现的变化。运行系统如何适应这些变化呢？一种是将系统复位，重新配置系统的结构和实现。另一种是系统在运行时进行动态演化以适应这些变化。对于一些要求连续运行的系统，如航空交通系统、数据采集系统，停止运行将带来重大的损失，所以在设计时应尽量考虑让系统具备动态演化的功能。
2　运行期变化管理
　　系统在运行时遇到的外部变化从性质上一般分两类。一类是需求的变化，它将有可能要求系统结构发生变化；另一类是系统实现部分的变化。需求变化将直接影响系统实现的变化，而系统实现的变化并不改变需求。
　　要让系统在运行过程中实现动态演化，首先要对变化进行管理。这包括：
　　1)确定变化的对象，即是什么发生了变化。
　　2)确定变化对系统带来的影响。
　　3)对变化进行控制以维护系统的完整性、一致性。
　　以下是管理变化的四个重要方面。
　　1)变化的策略。即运行期的变化是如何施加到系统上的。如系统是采取瞬时的功能替换，或者是新老功能并存，让新的功能逐步接管老的功能。这种策略由系统设计者根据系统的需求决定。
　　2)变化的影响范围。确定系统的各个部分是否受变化的影响。对变化的影响范围准确定位有利于对变化的管理。
　　3)将系统功能行为与系统动态演化尽量地隔离。隔离程度越高，其中一个发生变化不会影响到另一个。
　　4)对变化描述的抽象程度将影响系统管理变化的开销和复杂性。
3　软件构架、构件、连接器、构架风格
　　软件构架高度抽象地描述了软件系统的结构，包括系统元素的描述、元素之间的交互、用于指导元素复合的模式和这些模式的约束。构件是组成构架的基本元素，是对系统应用功能的实现。我们把构件看成一个黑盒子。构件封装了功能性，有着自己的内部状态信息。构件的实现是异质的(可以用多种语言实现)。构件的这些特性使得一些(OTS)通用构件可以很容易被复用。连接器是将系统中的构件绑定在一起的实体，是构件交互的中间媒介。连接器将构件的接口需求与它的功能需求分割开来。连接器封装了构件之间的交互协议。构架风格是指能够标识一类构架的功能性特征的集合。一种构架风格代表了一种软件设计成分进行组织的特定模式。构架风格是领域独立的。
4　软件构架与系统动态演化
　　以往处理运行变化的方法有：1)手工的方法。计算机放弃对系统的控制而由人对系统进行手工的维护配置；2)迂回的方法。通过冗余功能和簇机制来绕过变化；3)基于程序级的方法。采用动态的编程语言来支持系统运行期的变化。如Lisp、SmallTalk；4)基于模块级的方法。通过功能模块将系统在运行期的各种变化封装起来；5)基于结构的方法。系统由各个处理节点和连接各节点的连接器组成。从各种方法的处理效果来看，手工与迂回的方法只能处理特定简单的变化，而基于动态语言的方法使得系统的实现局限于几种动态语言上，而且效率低。模块级的方法要求在设计时就考虑到所有可能的变化，对变化的处理是源代码级的，不宜扩展。基于结构的方法能够很好地引入变化，但受到节点的状态的限制。
　　基于软件构架的方法在实现系统的动态演化方面有以下优点。1)设计者通过系统构架的层次来描述理解系统，可对变化的策略及变化的影响范围进行统一规划；2)系统变化的策略及对变化作出的反应封装在软件连接器中，从而将变化管理与特定应用行为分离；3)软件构架从高层次描述系统，有利于对变化的管理。
　　运行系统的动态演化在软件构架上表现在：
　　l)运行期构件的添加。通过增加构件可以扩充完善系统的功能，在添加构件时应根据系统的当前状态以确定是否应对构件的内部状态进行初始化。
　　2)运行期构件的删除。通过删除构件可以去掉系统中一些不再需要的功能。在删除构件时应确认该构件的所有事务都已处理完毕。
　　3)运行期构件的替换。通过替换构件可以升级完善系统的功能，为保证新老构件的顺利交接。在替换构件时应保证老构件的当前状态能够复制到新构件中，而且新老构件不能同时处于激活状态。
　　4)运行期构架的重组。通过构架的重组可以改变系统的功能行为。重组表现在构件、连接器之间的连接拓扑结构上。
　　下面针对C2软件构架风格，介绍软件构架在系统动态演化中的应用。
5　C2构架风格
5.1　概况
　　C2是一种基于分层结构，事件驱动的软件构架风格。图1是一个典型的C2风格构架。C2构架中的基本元素是构件(Component)，连接器(Connector)。每个构件定义有一个顶端接口和一个底端接口，这使得构件的增加、删除、重组更为简单方便。每个连接器也定义有顶端接口和底端接口，但接口的数量与连接在其上的构件，连接器数量有关，这也有利于实现在运行时的动态绑定。构件之间不存在直接的通讯手段。构架中各元素(构件、连接器)之间的通讯只有通过连接器传递消息来实现，如图2。处于底层的构件向高层的构件发出服务请求消息(Requests)，消息经由连接器送到相应的构件，处理完成后由该构件将结果信息(Notifications)经连接器送到低层相应的构件。

图1

图2
5.2　特点
　　C2风格区别于其它软件风格的几个显著特点：
　　A.基底独立性(Substrate independence)
　　在整个构架中，构件只知道处于它上层的构件而不知道它下层的构件。构件通过发送一个请求消息利用上层的构件的服务，而构件与下层构件的通讯是隐式的。它发出的消息有可能被多个构件所接受。
　　B.消息通讯机制(Message-based communication)
　　构件之间的交互只有通过信息传递实现。
　　C.多线程(Multi-threaded)
　　组成系统的各个构件有自己的状态，进程控制。
　　D.不共享地址空间(No assumption of shared address space)
　　组成系统中的各个构件不共享地址空间。
　　E.实现与构架分离(Implementation separate from architecture)
　　实现技术与系统的概念构架相分离。
　　C2风格的以上这些特点减少了构件之间的相互依赖性，有利于动态实现系统构架的变化，对系统动态演化提供了最大程度的支持。
5.3　C2实现框架
　　图3是C2风格的基本类框架。
Component Interface　　　　　Architecture Interface
　　start( )　　　　　　　　　　start( )
　　finish( )　　　　　　　　　　finish( )
　　handle(request)　　　　　　　handle(request)
　　handle(notification)　　　　handle(notification)
　　　　　　　　　　　　　　　　addComponent(component)
Connector Interface　　　　　removeComponent(component)
　　start( )　　　　　　　　　　addConnector(connector)
　　finish( )　　　　　　　　　　removeConnector(connector)
　　handle(request)　　　　　　　weld(connector, component)
　　handle(notification)　　　　weld(component, connector)
　　addTopPort( )　　　　　　　weld(connector, connector)
　　removeTopPort( )　　　　　unweld(connector, component)
　　addBottomPort( )　　　　　unweld(component, connector)
　　removeBottomPort( )　　　　unweld(connector, connector)
图3
　　Component、Connector、Architecture是三个抽象类，其中方法start和finish是用来初始化一个构件的运行和结束一个构件的运行。Handle方法用来处理各对象之间的消息传递。AddTopPort，addBottomPort，weld用来在运行时改变构架的组成元素和各元素之间的连接拓扑结构。enum等方法用来查询构架自身组织和结构。C2框架的这些方法有利于描述和实现系统构架的动态变化，开发者可以通过对上述对象的继承从而复用这些方法。
5.4　C2连接器
　　在C2风格软件构架中，连接器以独立实体存在，由它将各个构件连接起来并充当它们交互的中间件，从而将构件的接口需求与功能需求相分离。在动态演化中对变化的处理策略、对变化的隔离、对变化的一致性维护是通过连接器(Connector)来实现的。主要表现在：1)连接器能够实现不同的变化策略。例如：如果要支持瞬间的构件替换，连接器可以将通讯从老构件切换到新构件。如果要实现渐进式的构件替换，就可以将老的服务请求定位到老构件，新的服务请求定位到新的构件。2)连接器可以隔离变化，防止变化的影响扩散，将变化局部化。例如：如果一个构件在系统运行时不可用了，那么连接器将发给它的服务请求用临时队列保存起来直到该构件恢复正常工作，结果达到了其它构件与该变化相隔离的效果。
6　应用
　　结合上述的C2风格，我们将其应用在一个网络服务支持系统中，系统可以针对不断提出的新的变化进行动态演化。
6.1　需求简介
　　某一大型企业的服务支持系统要求对工程自签定合同以后的计划、安装、服务进行一条龙的管理。首先由市场部签定工程合同，对该工程编号，产生该工程的原始信息。生产部将生产出该工程的硬件材料，并进行调测。等到该工程具备安装条件时，将由计划部列入工程安装计划，由所属分公司进行现场安装。分公司在安装期间不断返回工程的安装进展情况。在安装完毕验收后，由服务部统一进行维护。由于系统与多个部门发生联系，系统且有较高的实时性要求，系统在不断地运行过程中工作流程还会发生不断变化及工作具体实现策略的变化，所以要求系统能够在最大程度上实现动态演化以保证其它部门的正常工作。
6.2　C2风格构架
　　简略的C2风格构架如图4所示。

图4
　　各个构件说明如下。
　　DA(DataAccess)：数据存储构件。负责对数据库的访问，接受下层构件的数据库服务请求。
　　PSM(Project State Manager)：工程状态管理构件。根据下层构件的修改及查询工程数据及状态请求，产生相应的数据库访问请求提交给DA。
　　PPP(Project Plan Policy)：工程计划管理构件。根据PSM返回的工程状态，设置工程的计划。在具体实现中主要根据工程的发货及相应硬件准备情况来设置。
　　PSP(Project Service Policy)：工程服务管理构件。根据PSM返回的工程状态，设置工程的服务类型、服务时间。在具体实现中主要根据工程的类型及完成日期来设置。
　　PSR(Project State Report)及SR(Service Report)是相应的报表构件。DI1(Date Input1)，DI2(Date Input2)等是与工程数据录入相对应的构件，各个部门负责各自有关数据的录入。
　　Graphics构件负责图形界面的显示。
　　各个连接器说明如下。
　　Connectorl：负责将数据库服务请求(如Sql语句)提交给数据库访问构件及将操作结果返回给下层构件。
　　Connector2：负责将工程状态的操作提交给工程状态管理构件，及将工程状态广播到下层的构件及连接器。
　　Connector3：负责将工程状态操作请求及工程状态的广播，是基于网络的连接器。在整个构架图中，位于其上方的构件及连接器位于服务器端，位于其下方的构件及连接器位于用户端。
　　Connector4：负责图形方面的服务请求及数据交互。
　　值得注意的是工程状态管理构件(PSM)是整个系统的核心构件，系统中对工程状态的增加，修改，删除，查询等操作都要最终提交给它，而且操作的返回结果由它传给Connector2，再由Connector2进行广播，相应的构件就可以得到相应信息了。如：DI1构件要修改工程的完成日期(HandOver)，它将发送请求PrjState_Request(...)给PSM，该请求经由Connector3，Connector2提交到PSM，PSM收到请求后生成相应的数据库服务请求DB_Request(...)经由Connector1提交到DA，由DA进行数据库的操作。操作完毕后DA将操作结果DB_Notification(...)返回给Connector1，PSM在收到该消息后，发送消息PrjState_Notification(...)，由Connector2将该消息进行广播。与该连接器相连的每个构件和连接器都有可能(这与连接器的消息广播机制及策略有关)收到该消息。在DI1构件收到该消息后(注意到Connector2，Connector3之间存在直接的通讯连接，所以该消息可以广播到DI1构件)，可以进一步运行。与此同时PSP构件在接受到该消息后，将根据该工程的完成日期和服务策略决定该工程的服务情况。如果该工程满足一定的服务要求，PSP构件将发出设置服务类型和服务时间的请求。因为完成日期的更新在工程的计划之后，故PPP构件将不接受该消息。
6.3　系统的动态演化
　　下面是该系统在运行过程中针对一系列的变化作出的动态演化。
　　构件的增加：输入构件(DI3)的增加。由于工程的进度信息原来是属于计划部负责管理和填写。现在由于工程的数量的增加，计划部的工作量急剧增加。现在提出由分公司在现场通过网络直接填写。DI3则是为此而设计的分布式构件。工程状态检查构件(PSC)的增加。原来对工程数据的检查是由工程状态管理构件(PSM)完成，但现在由于数据操作量的增加，PSM越来越成为系统性能的瓶颈，增加的构件PSC是在数据提交之前对提交的数据进行检查，将不合法的数据及时反馈给下层构件，而不向上提交。在实现构件增加的同时必须对构件状态进行初始化。
　　构件的替换：构件的替换主要用于构件的升级。服务构件(PSP)的替换。原来的服务策略是由系统根据工程的状态确定服务的类型及服务时间，现在要求服务时间不是确定的，而是根据工程的状态和历次服务历史来确定一个最迟服务时间(deadline)，工程的服务只要在此时间之前完成即可。并在输入服务时间的同时确定下次的最迟服务时间。替换在老构件处于空闲状态进行。在进行构件替换的过程中，为保证系统的正常运行，要求在老构件的状态处于非活动状态进行替换。
　　构件的删除：报表构件的删除。构件的替换比较简单，但要注意构件的删除应在构件处理完了所有的任务以后，即构件处于非激活状态，如报表构件的删除。系统经过演化后的构架如图5所示。

图5
6.4　动态演化支持
　　图6是基于软件构架方法实现动态演化的模型。

图6
　　系统构架以脚本的形式存在。通过对外部变化进行解释，将其转化为系统构架的变化(如：构件的增、删、替换等)。这部分由系统设计师根据系统的需求情况得到，再由系统构架管理器将其转化到相应实现的变化。系统构架管理器还负责对提出的构架变化进行一致性验证及对构架脚本进行更新维护。
7　结论
本文介绍了一种基于软件构架实现系统动态演化的方法，软件构架由于其抽象层次高，并可通过连接器来封装不同的运行时变化的策略将特定应用功能与运行变化分割开来，从而实现对变化更好的管理，使得对系统演化的考虑不再渗透到系统的详细设计当中。值得一提的是目前还没有一种合适的方法来对系统构架的变化进行一致性的检查，以保证系统的完整性。这将有待于进一步的研究。
汪洋（复旦大学计算机系 上海 200433）
葛叶冰（复旦大学计算机系 上海 200433）
李丽燕（复旦大学计算机系 上海 200433）
参考文献
1A component and message-based architectural style for GUI software, IEEE Trans., 1996, SE-25 (6). Pp. 390～406
2Dynamic Structure in Software Architectures Fourth SIGSOFT symposium on the Foundations of software engineering, San Francisco, 1996
3Issues in the runtime modification of software architectures UC Irvine Technical Report UCI-ICS-96-35
4Architectural support for dynamic reconfiguration of distributed workflow applications. IEE, 1998 October
5ADLs and Dynamic Architecture Changes. Proceedings of the Second International Software Architecture workshop(ISAW-2), pages 24~27, San Francisco, CA, October 4~15,1996
收稿日期：1999年8月14日
