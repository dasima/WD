微型机与应用
MICROCOMPUTER & ITS APPLICATIONS
2000　Vol.19　No.6　P.58-60




基于Windows线程技术实现数据
采集的简易编程方法
周开利　汪云
摘要：基于Windows线程编程技术，将DOS数据采集程序“包裹”成1个线程，利用共享文件交换数据，实现Windows环境下数据采集的简易编程。
关键词：数据采集 Windows 线程 共享文件
　　Windows以其友好丰富的图形用户界面、简单灵活的操作，折服了各行业的用户。工业控制领域的用户也不例外，但由于Windows操作系统是以非抢占事件(消息)驱动为主要特征，强调设备无关性风格，不鼓励用户开发直接面向硬件设备的用户程序，因此试图在Windows环境下开发数据采集软件，往往使习惯DOS编程的一般用户感到无从下手。也有文章[1][2][3]介绍了一些很好的解决方法，但大都需要较高的Windows或特定语言(如Visual C＋＋)的编程技术。而当你熟悉的Windows开发环境不适于采用上述方法时，本文介绍的方法也许不失为一种简单易行的方法。
本文使用DOS环境下的Borland C＋＋和Windows环境下的Borland C＋＋ Builder进行程序编制，但若使用的是DOS环境下的BASIC、PASCAL或Windows环境下的VB、VC＋＋等，同样可以采用本文所介绍的方法。它所要求的仅仅是：(1)任何一种你所熟悉的DOS环境下的I／O编程技术和共享文件使用方法；(2)任何一种你所熟悉的Windows开发环境中有关线程和共享文件的应用方法。
1  基本原理
　　本文采用的方法如图1所示。

图1  原理框图
　　数据采集卡通过DOS I／O接口程序，对I／O口进行读写操作交换数据；而DOS I／O接口程序与Windows应用程序之间却是通过共享数据文件交换数据。换句话说，对I／O口直接操作的依然是DOS程序，Windows应用程序只是对数据采集间接控制，从而避开了Windows程序不能对I／O口直接读写的限制。
　　问题的关键是Windows应用程序如何能实时获得I／O口的数据并对其读写进行控制，本文通过线程和共享文件解决这一问题。所谓线程，简而言之就是运行在应用程序中的独立进程，它只是代码的执行体，其处理时间由操作系统控制而不是程序控制。在Windows应用程序中加入DOS I／O接口程序线程对象，则二者并行运行于计算机中。DOS I／O接口程序通过对I／O口的直接读写完成数据采集并以采集的数据不断更新采集数据文件中的数据。Windows应用程序可同时从采集数据文件中读取数据，效果就好像从I／O口直接读取数据一样。为了对数据文件能同时进行读写操作，文件必须以共享方式在2个应用程序中同时打开――即共享文件。另一方面，如果我们需要对DOS线程进行控制或传输数据(如终止线程运行或传递D／A数据等)时，可以以同样方式再建立1个控制数据文件进行“消息”传递。
2  软件编程
2.1 DOS部分
　　本文以市售PCLS－718数据采集卡为例，使用DOS环境下的Borland C＋＋进行软件编程。该采集卡具有2个D／A和16个A／D通道，其I／O口基地址为0x300，0x300～0x301为A／D通道的高／低位数据和通道号端口地址；0x304～0x307为2个D／A通道的高／低位数据端口地址。
＃include ＜stdio.h＞
＃include ＜dos.h＞
＃include ＜STDLIB.H＞
＃include ＜conio.h＞
＃include ＜share.h＞
＃include ＜io.h＞
typedef unsigned int word；
const int BASE＝0x300； ／／设置I／O口基地址
void main(){
int status，dtl，dth，adl，adt，c＿reg，chv，i，Tn；
word da1＝0x0，da2＝0x0；
FILE *fADout，*fDAin，*fCtrl；
fDAin＝＿fsopen(″DAin.dat″，″r″，SH＿DENYNO)；
　　　　　　　　　　　　／／打开D／A共享数据文件
fADout＝＿fsopen(″ADout.dat″，″w＋″，SH＿DENYNO)；
　　　　　　　　　　　　／／打开A／D共享数据文件
fCtrl＝fsopen(″Ctrl.dat″，″r″，SH＿DENYNO)；
　　　　　　　　　　　／／打开控制共享数据文件
do {
　　fseek(fCtrl，SEEK＿SET，0)；
　　fscanf(fCtrl，″％d＼n″，＆Tn)；
　　if(Tn＝＝0)／／DOS程序接到Windows终止运行控制
　　　　　　　　　　　／／字“0”时，执行相应操作
　