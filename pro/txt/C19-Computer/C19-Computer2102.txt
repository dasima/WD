计算机工程
COMPUTER ENGINEERING
1999年 第25卷 第10期 Vol.25 No.10 1999



一个实时数据库管理系统的C++实现
冯汉华　古虹　王磊
摘要：介绍了一种使用C++语言和面向对象技术的实时数据库管理系统的具体实现，并阐述了面向对象技术对系统测试的促进
关键词：数据库管理系统；面向对象；哈希算法；软件工程；单元测试
C++ Realization of A Real-time Database Management System
Feng Hanhua1 Cu hong2 Wang lei3
(1.Dept.of Automation,Shanghai Jiaotong Univ.,Shanghai200030;2.Dept.of Biomed.Engineering,Shanghai Jiaotong Univ.,Shanghai200030;3.State Key Lab of Ocean Engineering,Shanghai Jiaotong Univ.,Shanghai200030)
【Abstract】A real-time database managementsystem is realized using C++ language and object-oriented technology in thispaper.It is also illustrates that the object-oriented technology has the advantage in system evaluation.
【Key words】Database management system;Object-oriented;Hashing algorithm;Software engineering;Unit evaluation
　　在开发某些实时性要求比较高的系统中，商用数据库管理系统并不适用。实时系统往往需要用到性能较好、系统开销比较小、功能要求不强但需要一些特殊功能的的数据库管理系统，这种数据库管理系统有时必须自己开发。
　　开发和维护一个数据库管理系统一般需要大量的人力和财力，一般的小型软件开发商是很难胜任的。本文介绍的实时数据库管理系统，是在很少的投资下完成的。由于使用了面向对象技术，不仅开发和测试过程只需要一二个人，而且研制周期也大大缩短。现在这个系统已经在某个实时调度系统中投入应用并稳定运行，达到了较好的效果。
1　系统特点
　　不同于往常的数据库管理系统的实现，这个实时数据库管理系统是采用C++语言和面向对象技术实现的。在实现的过程中，整个管理系统按照结构分割成许多子系统，每个子系统对应于一个对象(或被叫作类)，以完成其对应的一些核心功能。整个数据库管理系统就是由许多不同的对象组合成功的。每个对象保持相对独立，不仅对开发，而且对系统测试，都大有好处。
　　面向对象技术把开发过程分为系统分析、系统设计和对象设计3个过程。系统分析是基本性的，而系统设计却是最重要的部分。系统设计过程中，按照结构将系统分割成许多类，分割的好坏决定了整个系统开发过程的好坏。最后在对象设计过程中，程序员可以按照这种类的分割，分别完成对应的代码，最后组装起来。好的分割可以使系统复杂程度大大减小。每个类都是一个小型的子系统，这样程序员就很清楚已经完成了多少开发工作、后面还有多少开发工作。
　　使用面向对象技术也大大简化了后面的系统测试工作。只要熟悉软件工程并具有编写大型软件经验的人都应该清楚单元测试的重要性。面向对象的技术为模块的单元测试提供了良好的环境，单元测试就可以按照各个类分别展开。只要一个类的一部分方法已经实现，单元测试的工作就可以展开了。可以使用黑箱方法来测试，为每个方法编写简单的测试程序，让它在不同环境下调用类的方法，然后根据输入和输出来测试结果的正确性。编写类实现的时候，每个方法尽量简单，不要有太多分支；对于复杂的方法可以先实现一些简单的方法，然后在基于这些简单的方法上再实现较为复杂的功能。这样不仅程序结构简单易懂，而且这时黑箱测试法相当奏效，基本上能查出绝大部分错误。
2　系统结构
　　整个系统的结构如图1所示。在这个系统中，最基本的类有两个：GObject(数组对象管理类) 和 GField(数据单元管理类)。GObject 在整个系统中起了至关重要的作用。GObject 管理着一个数组，这个数组的每个记录的大小是在对象创建的时候确定的，而记录的个数却是可以动态变化的。使用者可以通过GObject的功能增加或减少记录个数。访问每一个GObject的记录需要调用一个锁定记录的方法，这样GObject可以通过与外存储器交换数据的方式实现巨型数组管理。GObject内部可以通过分页机制和最少最近算法实现高效率的内外存储器交换。

图1 数据库管理系统的实现结构
　　虽然GObject实现了动态增加和减少记录的机制，可是它能做到的只是在末尾增加或减少记录。为了能实现删除任何一个记录的功能，一个从GObject类派生出的新类GPool(存储池管理类)就诞生了。这个类的基本目的就是把需要被删除的记录放回一个空闲的存储池中。如果这条记录在最后，可以考虑调用GObject的功能释放该记录，也可以为了效率暂时保存，等到有一定批量的时候再删除。如果这条记录不在最后，那么可以用个链表串起来，下次如果要申请分配记录时，首先考察这个链表中是否有可用的记录，如果没有则再向GObject申请分配。这个简单的具有废料收集功能的类事实上是整个系统的存储管理核心。
　　另外一个基本类GField管理一条记录的若干数据单元。每个GField类描述了一种数据记录的结构，比如有多少数据单元，每个数据单元的类型、字节数以及在记录中的位置。
　　将GField类和GPool类结合起来就形成了一个基本的数据库的表的框架：GTable(数据库表管理类)。GField类为GTable类管理每条记录中的数据单元的读写，而GPool为GTable完成记录的增加和删除工作。在此基础上，GTable又实现了一些记录的查找和定位的功能。
　　剩下的任务就是要完成索引机制了。这个系统实现了几个通用的索引表的实现：B+树索引表和哈希索引表，还有根据特殊的实时系统的要求实现的层次索引表。下面就这3种表作一个简单的说明：
　　哈希表管理类GHash管理一个哈希表。它直接继承自GObject。哈希表本身是直接根据下标来访问记录单元的，不需要分配释放机制。下标值来自于一个哈希函数。在这里，哈希函数的值在0和N-1之间，N可以根据索引记录数规模指定。如果不同的索引哈希函数值相等就认为是哈希函数冲突，哈希表管理类必须有一个哈希函数冲突算法。有两种方式可以用来解决这种冲突：方法一是如果一个哈希表项被占用，则顺序使用下一个，如果到了哈希函数最大则绕回0。方法二是在表项N之后分配。无论哪种方法，为了达到高效率都有一定的存储空间的浪费。但是，无疑哈希索引机制是效率最高的索引机制之一。
　　另外两种索引方式都需要有一种树型的管理方式。首先，我们从GPool派生出GDLinked(双向链表管理类)。双向链表可以为树型结构完成一部分功能，因为树型结构的兄弟节点之间可以被看作一个链表。GDLinked类提供了一组方法，可以让用户维护若干个双向链表，在链表的任何位置插入、删除和替换记录，并有计数等辅助功能。我们又从GDLinked类派生出了两个类，一个是具有自由子记录的树型结构类GQTree，还有一个是最大拥有N个子记录的树型结构类GNTree，其中N是在创建类的时候指定的。这两种类具有不同的存储结构：GQTree类每个节点占用了GObject类的一条记录，而GNTree类每个节点是和兄弟节点一起占用了GObject类的一条记录。之后，从GQTree类派生出了GHier类，用于管理层次结构的层次关键词，又从GNTree类派生出GBPTree类，实现复杂的B+树插入删除算法。
　　最后将上述的所有类集合在一起，就形成了一个数据库管理类，也就是一个数据库管理系统。系统提供的所有数据库管理功能都被包装在这个数据库管理类里。
3　系统测试
　　在面向对象设计的时候，每设计一个对象或者一个方法，都应该想一想如何测试它。尽可能早、尽可能容易地发现错误，是最节约时间的做法。有些程序员往往带有侥幸心理，认为编好的程序可能不会有很复杂的错误，然后将所有测试工作留到整个系统完成后进行。这样做的结果是，往往会让程序员花几个小时来跟踪一个本来很简单的错误。其实这个错误在一开始的单元测试中，就会很容易   被发觉并处理掉。用面向对象技术实现系统的时候，每个对象基本上可以独立形成系统，那么一边编写代码一边做单元测试就变得轻而易举且自然而然。在本系统中，我们为GPool、GHash、GDLinked、GQTree、GNTree、GBPTree和GField等等各写了一个测试程序，这些都不需要在整个系统完成之后进行。
　　当多个程序员协同完成项目的时候，面向对象技术也使人员之间协作变得更加容易。如果每个程序员都需要等别人的程序调试完成之后再完成调试，那么整个项目的完成就变得遥遥无期了。可是我们可以考虑面向对象技术，让工作变得更有序。以这个系统为例：假如程序员A完成GObject类的编写，而程序员B完成GPool类的编写(当然这样分工是不合适的，因为GPool类依赖于GObject类，但有时可能必须这样分工)，可以让程序员A先完成一个简单的GObject类版本，不需要实现分页机制和最少最近算法，只需要实现一个简单的分配、释放和记录定位的功能；然后把这个版本提交给程序员B，程序员B在这个版本上进行GPool类的测试，而程序员A同时完成他的各种算法的编写和测试。最后程序员A向程序员B提供最终版本的时候，程序员B就不需要重新大量测试自己的那一部分了。
4　结论
　　本文讨论了一个数据库管理系统的实现，它将面向对象技术使用到系统开发和调试的各个环节之中。在这个系统的开发过程中，我们深刻地认识到：面向对象技术是一种方法，而不是一种语言。如果没有把面向对象技术的思想使用到系统开发中，即使使用了C++或别的面向对象语言，也并不能带来预期的效果。
作者简介：冯汉华（1974～），男，工程师，主研方向：数据库
作者单位：冯汉华（上海交通大学自动化系，上海200030）
　　　　　古红（上海交通大学生物医学工程系，上海200030）
　　　　　王磊（上海交通大学海洋工程国家重点实验室，上海200030）
参考文献
1 Maguire S.Writing Clean Code.Microsoft Press,1993
2 Knuth D E.The Art of Computer Programming,(Volume1/):Fundamental Algorithms.Addison-wesleyPublishing Company,Inc.,1973
3 Stroustrup B.The C++ Programming Language (2nd Edition).Addison-wesley Publishing Company,Inc.,1991
收稿日期：1999-02-08
