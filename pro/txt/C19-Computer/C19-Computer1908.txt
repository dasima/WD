微型机与应用
WEIXINGJI YU YINGYONG
2000　Vol.19　No.5　P.38-39




JAVA多线程编程问题分析
吕海莲　王巍
摘 要：多线程编程在程序设计中的重要性以及在编程中所注意的问题，包括多线程的分析和定义方法、线程运行中的合理调度、资源的有效分配以及解决资源冲突的有效性措施等。
关键词：Java语言 线程 同步 冲突 死锁 类
1 JAVA前景与多线程概念
　　JAVA不仅是一门语言，它已成为一门技术，例如JAVA芯片技术、JAVA编译技术、基于JAVA的信息家电联网技术（Jini）等，并以它的平台独立性、健壮性、JAVA虚拟机技术等特点受到广大编程者青睐。JAVA能把所有东西从桌面计算机平稳地转换成基于网络的计算，它是Web浏览器中必须具备的技术，是一个完全面向对象的语言，是有利于处理网络协议的程序综合库。线程是从一个完整应用程序分出的单独的处理步骤，是程序内部的一个顺序控制流。一个小程序中可含1个或多个线程并可同时运行，由于单线程一旦运行就独占线程的所有时间资源，而多线程的出发点就是提高系统的并发性，因此，引人注意的不是一个单独的线程，而是在一个程序中实现多个线程，它意味着一个程序的多行语句同时执行，即用抢占资源的方式对多个线程实现轮流执行。例如HotJAVA浏览器就是一个多线程的应用实例。在JAVA语言中，多线程编程已成为编程的一个有效工具，可编制出界面友好、效率高的应用程序。
　　JAVA内在支持多线程，其线程由3部分组成：
　　（1）虚拟CPU，封装在Java．lang．Thread类中。
　　（2）CPU所执行的代码，传送给Thread类。
　　（3）CPU所处理的数据，传送给Thread类。
　　JAVA通过多线程有效地实现了多任务的并发执行，所以，在JAVA多线程编程中，不仅考虑多线程自身的问题分析，还应注意各线程在调度中出现的各种情况，下面从几个方面对多线程的设计进行讨论。
2 多线程设计与创建
　　一个程序中含几个线程应视具体事件而定，像一个弹球游戏一样，为了使球在运动中随时响应用户的输入信息，可设计2个线程：一个为处理用户输入的主线程；一个为专门处理球运动的球线程。主线程和球线程在系统的调度下交替执行，形成灵活的弹球窗口示例。确定线程后，一般用Runnable接口实现线程的创建，它比不支持多重继承的Thread类方法有更好的灵活性。
2．1 线程编程形式
　　在Runnable方法中可用二种编程形式：
　　（1）采用构造方法。在子类中先定义线程，然后在构造方法中完成线程的创建和启动。
　　（2）采用启动方式。在程序中先定义线程，再设计一个start（）方法，在start（）方法中完成线程的创建和启动。
2．2 线程优先级设置
　　线程的运行由调度程序完成，调度方式有抢先式（preemptive）和协作式（cooperative）。抢先式比协作式有更好的资源调度优势，而JAVA支持抢先式，因此，在多线程程序中，分配优先级的能力非常重要，它是线程调度的决策依据，程序中的一些部分可根据其不同重要程度而有所变化，保证按照它们的价值给它们以相应的优先级。设置优先级必须注意以下情况：
　　（1）优先级要用1～10之间的整数来确定。
　　（2）线程创建时，子线程继承父线程的优先级。
　　（3）线程创建后，可通过调用setpriority（）改变线程的优先级。
　　JAVA运行系统选择最高优先级的线程执行，在设计时，应注意让低优先级的线程有机会执行，此时高优先级的线程应该适当地进入睡眠状态。
2．3 合理建立和使用线程组
　　在JAVA中所有线程都是线程组的一部分，可根据情况建立自己的线程组或用系统默认的main线程组。采用线程组结构可对多线程集中管理，例如可以同时启动、挂起或终止一个线程组中的所有线程。在应用时应注意下列方法的运用：
　　（1）找到线程所在的组可用getThreadGroup（）方法。
　　（2）线程组支持访问权限，若没有定义，允许组中的线程查询和寻找其它组中线程的信息。
　　（3）在缺省情况下，创建的进程没有安全级，而大多数浏览器不允许改变安全管理程序，因此，只有在应用程序中创建SecurityManager类的子类，覆盖那些使用了线程安全级的方法。
3 线程状态转换的正确实现
　　每个线程都有一个从新生态（newborn）到死亡态（dead）的过程，中间经过可执行态（runnable）、执行态（runing）、阻塞态（blacked）等状态，其转换及相应采取的实现方法如图1所示。

图1 线程状态转换示意图
　　在多线程设计中，对每个线程的存在状态要进行正确的转换，对一些方法要慎重。
　　（1）线程不要过长地占用计算机的处理机，应在运行一段时间后调用sleep（）或yield（）方法以便给其它进程机会。
　　（2）慎重使用stop（）方法，避免不发警告而杀死1个线程，即执行终止了，而程序处在什么状态不能确定，这样就会杀死小应用程序所在的主线程。为此可遵循下列条件：
　　①1次只有1个线程运行applet代码。②在applet上启用start。要么为那个applet启动1个线程，要么让1个现成的线程继续运行。③在applet上启用stop导致登记1个请求，让运行线程停止，后面对start的调用可取消这一请求。
4 正确处理多线程之间的资源利用问题
4．1 多线程间的同步
　　线程同步提供了保证不同线程按适当顺序使用共享资源的工具。线程可直接访问共享数据，既有相互之间高效通信的优点，也有线程间任意相互干扰的弊端。安全的多线程数据使用方案要求不同线程处理不同的数据，即多个线程不能共享临界区。例如：有10张车票供2个顾客预定，而又要求2个顾客尽可能多地预定10张车票，这10张车票作为共享资源，可能导致1张票预定给2个顾客的情况，针对这种情况，设计时应采用正确的同步机制。
　　（1）使用关键字synchronized
　　sychronized关键字是给临界区加上锁。
　　方法1：
　　sychronized（实例名）｛
　　／／临界区 
　　……｝
　　大括号内的程序属于临界区，当某一线程进入临界区后，其它线程只能等待，用来保证临界资源只能分配给1个线程。
　　方法2：
　　class someclass｛
　　　 ……
　　sychronized aMethod（）｛
　　　 ……
　　｝｝
　　这种方法确保当1个线程调用了某实例aMethod操作时，其它线程不会调用该实例的aMethod操作。
　　（2）采用管程（monitor）
　　通过管程来限制线程的相互作用，可用多个线程保护数据的不同，因它对相关的对象不提供天然的保护，所有要靠自己慎重选择哪些代码包含在管程中。
4．2 避免死锁
　　若2个线程同步执行时需要相互打开，就会出现1个线程依赖于另1个要打开的线程而形成死锁。它不是资源不够引起的，而是由线程的调度引起的。对于死锁可用下述方法解决：
　　（1）尝试在尽可能短的时间内执行锁定的代码，占用时间越长，另一线程出现和需要对象的可能性越大。
　　（2）当你从另一个被同步的方法中激活被同步的方法时要小心，最好是清楚地定义每个线程的任务，并考虑使用什么数据和什么时候使用。
　　总之，在多线程程序设计中，要充分考虑各种可能出现的情况，并用适当的方法给予解决，使线程在运行过程中按所预期定义的目标进行。
吕海莲（河南平顶山师专计算机系　647000）
王巍（河南平顶山师专计算机系　647000）
参考文献
［1］王克宏．JAVA语言编程技术．北京：清华大学出版社，1999
［2］美Kanerva J．JAVA常见疑难解．北京：北京大学出版社， 1999
［3］美Walsh A．Fronckowiak J．JAVA宝典．北京：北京电子 工业出版社，1998
［4］史惠康．JAVA使用编程技术．北京：中国水利水电出版 社，1998
收稿日期：1999－12－29