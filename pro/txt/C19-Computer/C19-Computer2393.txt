计算机研究与发展
JOURNAL OF COMPUTER RESEARCH AND DEVELOPMENT
1999年　第36卷　第10期　Vol.36　No.10　1999



域分析：为软件重用产生有用的模型
李庆如　麦中凡
　　摘　要　软件重用被视为解决软件危机、提高软件生产率和质量的有效途径.近来的软件重用研究的结果表明，基于体系结构、特定域的重用能够有很大的改进.域分析是识别、捕捉、组织、分析和表示软件域中相关信息，确定软件的体系结构、框架和构件，以支持软件重用的软件工程过程，是解决重用问题的关键技术之一.在特定域的软件设计中，已经证明这种方法是有效地获得信息的一种途径.文中介绍了域分析和相关领域的概念、域分析的方法和过程及其工作产品.
　　关键词　域分析，域工程，域模型，重用
　　中图法分类号　TP311
DOMAIN ANALYSIS:
PRODUCING USEFUL MODELS FOR SOFTWARE REUSE
LI Qing-Ru and MAI Zhong-Fan
（Department of Computer Science and Engineering, Beijing University of Aeronautics and Astronautics, Beijing 100083）
　　Abstract　Software reuse is regarded as an effective way to solve software crisis and to improve software productivity and quality. Recently efforts on software reuse show that architecture-based, domain-specific reuse can yield great improvements. Domain analysis is a software engineering process that identifies, captures, organizes, analyzes, and represents information about a software domain to determine software architecture, framework, and components, and to support the reuse of software components. This method is one of the key techniques to solve the reuse problem. It has been proved to be an effective and efficient way to get the information needed for the design of domain-specific software. Conceptions about domain analysis and related field, as well as method, process, and products of domain analysis are also introduced. 
　　Key words　domain analysis, domain engineering, domain model, reuse
1　引　言
　　软件技术发展的主要目的之一就是为了解决软件重用问题，无论传统的软件开发方法还是面向对象的开发方法，都在为达到这一目的而努力.早期的软件重用主要集中在通用功能库的建立上，但并未产生质量和产量上的较大改进.近来软件重用研究的结果表明基于体系结构、特定域的重用能够有很大的改进［1］.
　　要解决“软件危机”就要生产出封装的、易于重用的软件构件.要达到这一目的就必须进行域分析，以确定软件的体系结构、框架和构件，从而快速实例化出一系列适应性很强的产品谱系（product family），而不是功能、性能满足某个用户需求的产品.产品谱系是基于一组通用软件资产(software asset)派生出来的软件产品.这不但需要开发框架的通用化、模式化，还需要相应构件工具的标准化与规范化.同时，一个很好定义的软件开发过程也是有效重用的关键.
　　一个软件域(domain)是共享一组通用的、可控制功能的系统或应用程序，也将其称为产品线（product line）.这些通用的功能是嵌入在各种软件构件之中.域分析则是生成一个有特征的软件域，以支持软件构件重用的软件工程过程.因为识别、捕获和组织相应的重用信息，并在通用域重用是十分困难的，所以应把重用的注意力放在特定应用域.
　　重用是由两方面组成的：为重用进行的开发（development for reuse）和用重用进行的开发（development with reuse），分别对应为域工程和应用工程.为了有效地进行重用，都需要系统的方法来指导.
　　近来，许多人都很关注诸如业务对象、框架和模式等重用技术，也提出创建可重用资产的技术和指南.本文从重用过程框架开始，介绍了域分析结果产生的一系列工程过程的活动.为了介绍域分析总体信息，先描述一下与之相关的域和域工程的概念，再详细介绍域分析及其相关活动和产品.最后，简单地介绍从域模型到体系结构.
2　重用框架
　　软件重用是从已定义的软件构件和为重用设计的部件中构建新系统的过程.在软件开发过程中，重用是指能充分利用已有的软件开发技术和软件开发周期中各阶段的产品.如人们早已熟知的代码重用，但代码重用有其局限性，近来的研究表明，在对系统部件约束最小的地方重用性最大，而作为系统早期设计的体系结构对系统构件的约束最小，所以基于体系结构的、特定域的重用对产品质量和数量有重大改进.
　　适合于所有情况的软件过程模型是不存在的，不同的软件生命周期描述的角色、活动、方法，以及开发和管理者的职责都是有所差异的.而一个重用的过程却有十分明确的目标：确保成功的重用.为此，美国国防部在STARS项目中提出了重用过程开发的概念框架［2］，以帮助不同的组织了解他们的重用过程.这个概念框架由3部分组成：创建资产、管理资产和利用资产.成功的重用需要软件资产的开发者（创建人员）和重用者（使用人员），以及面向重用的管理和支持.这里的软件资产可以是软件构件、生成的工具、设计文档的模板，或在一个特定域内为重用工程化的任何软件生命期中的产品.资产创建过程包括产生和演进域模型、域体系结构和软件构件等；管理资产过程包括获得、评估、组织资产，以帮助用户了解如何更有效地利用资产；利用资产过程是用所支持的资产构建新产品.而域分析是整个过程的起点，图1给出了域分析在所提出概念框架中的作用，重用工程过程中创建资产、管理资产和利用资产3个基本过程活动都是由一个或多个域分析的结果所指导的，并由业务目标驱动整个过程.


图1　域分析软件工程过程
3　域工程
　　为了介绍域分析总体信息，我们需要了解与之相关的域和域工程的概念.
　　域是指一个问题或任务的范围，在其中要开发多个高度相似的应用系统来满足不同用户的特殊需求［3］.简而言之，一个域是一组相关的系统，相关的方面是公共设计、公共服务、公共技术和公共信息体系结构.域的例子可以是特定的业务功能，如客户订单的处理；也可以是特定的业务类型，如市场.一个域可以窄到单个应用程序范围或产品线，也可宽到整个企业.将域划分，使之便于管理，从而更有效地实现重用.
　　对于软件系统的开发，可以采取不同策略的开发模式，从面向用户的角度可以将其划分为3类：面向单一用户、面向一组相似用户和面向众多相同用户，如2图所示.在这3种不同的系统软件开发中，其系统的边界和构件有着不同的特点.根据单个客户合同定制的产品，这里用户是指定的，构件是用于单个系统，边界也是限制于这个系统的.面向众多相同用户的产品，构件是用于单个系统，边界也是限制于这个系统的，是相同产品的大批量生产.面向一组相似的用户的系统开发处于中间地带，有一个域边界和可重用构件，不是仅用于一个系统，而是域中一组相似系统.在这一类系统开发中不是寻找任何单个系统的完整解决方案，而是提供对大多数用户都较好的解决方案.这些特定客户群体的系统群就是特定域.这正是域工程所处的位置.


图2　开发模式
　　域工程是识别和创建一组面向域的可重用构件的过程［3］.域工程是产品线软件开发方法产生的基础，影响一个或一组系统谱系的可维护性、可了解性、可使用性和可重用性.域工程为所分析的域开发域模型和通用体系结构，并基于模型和通用体系结构识别可重用构件.域工程的3个组成部分是：域分析（定义“问题空间”）、通用体系结构的开发或域设计（提出“解决空间的框架”）和域实现（实现所提出的“解决空间”），如图3所示.


图3　域工程和应用工程(两个生命周期)
　　域工程是以域分析为出发点的.域分析包括识别、收集、组织、分析和表示域中相关信息，是对已有系统和它们开发历史的研究，从域专家获得的域知识和域中出现的技术的研究.域分析产品包括域定义和域模型.　　
　　使用在域分析中收集的域知识，域工程师开发一个通用体系结构.前面已谈到重用的注意力应放在特定应用域，所以通用体系结构也称特定域的软件体系结构(domain specific software architectures, DSSA)，它包括系统中各种构件之间的交互关系的共性和差异，是一个域中产品线的通用体系结构.域工程师将创建的可重用构件分类到重用库中，由应用工程师所用.因为构件的开发是基于通用的体系结构，所以该活动是以体系结构为中心的.如果将一个系统或子系统视作一个满足确定需要的黑盒子，如果这些系统可重用构建其他系统，我们就可以大大地减少开发一个系统/子系统的费用.所提出的“兆程序设计”的概念就是这样实现系统的.
　　域工程和应用工程：
　　域工程和应用工程共同构成了重用工程，图3不但给出了软件重用的两方面，而且反映了域工程到应用工程的关系，从中可以看出两个生命期的活动和产品的关系.
　　域工程活动与应用工程活动相似，都是集成一套工程原则支持系统的设计、开发.但域工程所包括的设计软件资产是面向一组或一类相似应用程序的，而应用工程则是为单个应用设计最佳解决方案.此外，应用工程提供了“完整的解决方案”，而域工程定义跨多个系统的功能范围，如可以集中于整个系统中软件实现的特定功能，它有可能比系统范围小.
　　总之，域工程活动的产品可被应用工程所用，应用工程的活动又反过来影响未来域工程活动.应用工程的重点是单个系统，而域工程的重点则是在一个域内多个相关系统，通过制定一个系统谱系的解决方案来支持应用工程中的单个系统，如简化系统的建造，提高分析和预测系统行为的能力.
　　需要说明的是，很多分析方法中将域工程和域分析内容经常互相代替使用，虽然域分析作为在域工程之前出现的术语，域工程却是内含更大（inclusive）的术语.很多域分析的研究人员通常将“是什么”和“如何做” 分离开，另一些人将域分析限制为“是什么”，或是分析中问题的定义阶段.“如何实现”则是指域工程的后面的阶段［5］.本文主要描述与域分析相关的问题定义和分析阶段，下面将详细地介绍一下域分析的有关概念和方法学.
4　域分析
　　重用软件资产主要的障碍之一就是围绕资产的不确定性，包括回答软件资产在原始场景（context）下的行为如何，在新的场景下的行为如何，适应性将如何影响它的行为等这些问题.所开发的重用技术的设计（如文档标准，适应性技术等）就是为了解决这些问题.然而，作为需要确定的软件资产最佳范围（在哪个系统集内软件资产最可能重用），它们并没有提供完全的解决方案.
　　而域工程和域分析方法就是开发来解决这些全局问题的：谁是资产基础的目标用户？谁是域的其他业主（stakeholder）？什么是域的界限？什么定义一个域的特征？何时域模型完成？特征如何按照不同的使用场景变化？如何结构化资产基础以适应不同的使用场景等.
4.1　域分析的定义
　　早在80年代初，James Neighbors就提出了“域分析”这一概念［6］，他认为域分析是“标识一个特定问题域中一类相似系统的对象和操作的活动”，域分析是在域工程内的一种活动：识别、捕捉和组织在一个域内开发系统所使用的信息，以使其在创建新系统时可重用.
　　关于域分析有很多类似的定义：
　　Kang等人在1990年提出，域分析是识别、收集、组织，并表示在一个域中的基于现有系统的研究和它们的发展史的相关信息，从域专家获取的知识，系统的基本理论，和域中新出现的技术［7］；
　　Prieto Diaz［3］认为域分析是识别、捕捉和组织可用在开发软件系统中的信息，特别是创建新系统时可重用的信息的过程.域分析是一类系统的分析，而不是一个系统.
　　总之，域分析是标识和捕捉特定域中相似系统的有关信息，尤其是现在和将来需要使用的系统信息，通过分析挖掘出其内在规律及特征，并对信息整理与有效的组织形成正确的模型的活动.
　　域分析和系统分析是相似的，它们的不同之处在于系统分析关心特定系统中的特定动作，域分析关心应用域中的所有对象的动作，且特别强调重用分析.因此，域分析要注意发现和开发相关系统的共性和可变性.
4.2　域分析的目标
　　域分析收集所有相关于软件资产的信息，帮助域工程师评估资产的可重用性.例如，如果已有开发文档涉及在开发过程中所用的设计决策链，对潜在的用户有用，就能根据此制定有效的重用决策.
　　域分析对一系列系统模型的共性和可变性进行分析，挖掘软件资产中隐藏的场景信息，洞察隐藏的基本原理.它回答诸如：为什么开发者在这个系统与其他系统设计中采用了不同的折衷方案？什么样的开发场景影响这些决策？在这个域中，如何将设计历史转化为对新开发者所创建新系统更有说明性的指南等问题.而这是在孤立地研究一个单一系统所不能发现的.
　　在一个特定域中，通过域分析能够为软件开发过程产生一个通用体系结构.简单说，域分析的目标是确定在限定的域中想要重用的是什么.不同的域，有不同的域特征和功能，也有不同的重用侧重点.
　　总之，域分析的目标就是定义正确的可重用的软件对象――域模型，从而为重用的资产提供系统的基础.
4.3　域表示――域模型
　　域以域模型的形式表示出来，它包括形式化的模型和非形式化的信息，前者支持解决方案精确的映射，后者辅助问题域的表达.
　　为了使域分析的结果对软件开发、重用提供更好地支持，必须以系统的方式捕捉、表示分析结果，并通过模型形式化地表示所获得的知识，这就是域模型.域模型为未来的相似系统的开发所重用，也为维护已有系统的计划所重用.域模型是设计未来构件的起点.
　　域模型包括所有域服务、域属性和域中对象之间的基本关系.存在许多种域模型，一些不同的域分析方法可以产生不同种模型，从不同方面反映域信息.模型的通常表示有：面向对象、实体关系属性和人工智能（如语义网络、框架和规则）等.使用通用的表示法（如统一模型语言UML）能更好地提供知识交流的途径.
4.4　域分析的过程
　　关于域分析应如何进行，并没有固定的规则，关键是对所考虑域的范围进行仔细地限定、考虑域中系统共性（提出所要求的特征）和可变性（提出可选的特征）、组织好所了解的域中各种元素之间的关系，并以一种有用的方法表示所了解的知识［3］.
　　域分析是复杂的任务，它要求从域专家、从已有系统开发的结果、从所采用技术的有关知识、用户、域能引用的资源，以及域未来的趋势中获得信息.已经获得的这些材料由域分析人员、域专家和域工程师分析，并且按照一定的管理原则和域分析方法的指导，生成域分析产品.不同的方法、不同的问题空间的侧重面产生的域模型也不同，为此要有一些知识或类的分类、功能模型、特定的域语言或某些域标准等，并整理为知识库.在其中需要多次反馈，不断求精，以增加对特定域的了解，更新域模型和知识库.图4给出域分析的一般过程.


图4　域分析的一般过程
4.5　域分析方法
　　域分析方法学是基于两个概念：抽象和求精.抽象是一种处理复杂性的有效手段.域分析使用抽象原则降低复杂性，有效地从域中一系列应用中抽取特征，创建域分析产品，而求精域分析产品就可以开发域中的特定应用.除此之外，域分析还应该支持对软件过程中可重用信息的理解、表示和模型.
　　至今为止已有很多的研究人员提出了不同的域分析方法.每一种域分析方法都有自己的特点，这取决于它们要解决的特定问题，如这些方法可以是问题驱动的、应用驱动的，也可以是面向知识表示的.这些方法学提出人员的背景也很深地影响这些方法学本身.
　　由于域分析定义的差异，而且域分析技术本身就是处于几个交叠的系统工程领域中，不同程度地嵌入了这些相关技术，许多域分析方法都与特定的系统模型、分析和设计技术很相似，如面向对象方法等.下面介绍一些有影响的域分析方法：
　　(1) 面向特征域分析FODA（feature-oriented domain analysis）的域分析方法［7～10］
　　FODA是由Sholom Cohen等人在软件工程协会SEI作为域分析项目的一部分开发的一种域分析方法，FODA是基于标识系统类中有特色特征的域分析方法，定义了3个基本阶段：场景分析、域模型和体系结构模型.
　　FODA方法已经在商业和军方应用程序中应用，如军队移动控制域、NORTEL的电信自动提示和响应域.　　
　　(2) 组织域分析模型ODM（organization domain modeling）域方法［3，11］
　　ODM是域分析和模型的通用方法，集成域计划、域模型、体系结构工程和资产工程的组织和战略方面的域工程方法，是在美国高级研究项目计划机构（DARPA）的STARS项目中作为重用/产品线方法一部分开发的.
　　ODM可以划分为3个阶段：计划域（选择、限定和定义目标域）、模型域、工程资产基础（基于特定目标客户的需求，工程化满足一些域可变性子集的资产集合）.ODM是基于样板的模型，强调描述（description）和说明(prescription)模型.
　　HP修改了早期的ODM流程模型适合于本公司的组织目标，并开发了域工程业务手册.空军CARDS项目在几个不同的域应用ODM，如自动消息处理系统AMHS域分析、作为Hanscom AFB域范围一部分的产品线分析等.ODM形成军方STARS范例项目的域工程方法.
　　(3) 域分析和设计过程(DADP)［3］
　　域分析和设计过程技术强调系统为一个包括软件、硬件、人员因素和系统的外部影响的整体.它采用Coad-Yourdon表示法，利用面向对象技术的优点.它产生的域分析的产品是面向对象的模型，并强调了需要基于语义的一致表示法.另外，风险管理是这种方法的关键特征.考虑域分析过程的风险和域继承中的风险对确保域分析成功是很重要的.域分析是迭代的过程，随着时间发展会做得更好.
5　域分析产品
　　域分析的过程产生一系列工作产品，揭示对这个域不同视角、不同深度的了解.不同的产品不同程度地表示了企业的知识和视景.域分析的一般产品是域定义和域模型.域定义表示了与模型相似的信息，但目的不同.域模型是完全的视图，它包含从域专家、存在系统和未来趋势中提取的知识，表示了分析人员对域的了解.域定义是域的高层视图，定义了可视对象的属性和服务、最高层整体-部分结构、高层的通用-特殊结构和顶层主题图.域字典是对了解其它产品必要的术语列表，它包括在域定义中.
　　理想的问题空间是简明、易于了解和抽取的，但大多数域却是很复杂的.域分析是一个工作密集、复杂的过程，必须与重用者进行大量的详细信息的通信.
5.1　域定义
　　域定义的目的是帮助用户确定这些域分析的结果在正在开发的新系统中是否有用.这些域定义是域的顶层视图，描述域中有用的场景.
　　域定义要确定是否新系统在这个域中，或相关于这个域.域定义标识了新问题与域分析结果的关系.它需要定义：域接口、域通过接口提供的服务、域边界、域的主要元素和子域、用来定义域的术语和提供给域的服务等.
5.2　域模型
　　域模型用于收集、组织和表示所有域信息，是软件资产的基础.在初始分析之后，可修改域模型来更新域分析结果，它主要提供了一个收集和组织信息的框架.
　　域模型的目的是表示问题空间.为了帮助用户了解问题域，域模型可以用一种抽象视图来表示，以识别有意义的关系和服务.为了帮助用户应用这些功能，域模型必须描述这些功能如何通过场景相关，如何以及何时使用每种功能的原理.一般说，域模型必须描述：域主要部分、对象和抽象(类)、对象和抽象（类）之间的关系、抽象（类）的属性和限制、由这些抽象（类）提供的服务、定义域更动态行为的场景，并选择一个实例、选项或变量的基本原理，它包括风险、质量问题（性能、易懂性等）和场景使用.
　　目前对域模型的视图没有统一分类标准，各种分类都是基于不同视图从各方面去展示系统信息.这里我们从下面几个方面去刻画域中的软件，并建立可集成的体系结构，重用软件资产，生成系统实例.这几种域模型是业务模型、信息模型、组织模型、应用模型和技术模型.
　　业务模型(business model)描述了业务工作如何进行，描述了一个组织，即业务或行政单位如何实施信息系统.业务模型为域分析的目的建立一明确地陈述，标识出域分析中的业主.这些业主包括产品开发组织中的管理者，谁是域资产的设计和实现者，谁将管理这些资产，谁将利用这些资产.可以通过建立业务模型，来保证域分析目标满足业务目标，使域分析小组有效地管理，并与各个业主之间建立伙伴关系确保域分析结果满足他们的需求.
　　信息模型(information model)定义和分析所实现域中应用程序的域知识和数据需求.域知识包括相关的科学理论和工程实践、已有系统的能力和可用性、过去系统的开发和维护经验及工作产品.系统分析的目的是按照域实体和它们的关系表示域知识，使其在操作分析和体系结构模型中的对象和数据定义中可用.信息模型可以是实体关系（ER）模型、语义网络或面向对象模型.信息模型主要为需求分析人员和软件设计者所使用，以保证在系统开发所用的适当的数据抽象和分解.
　　组织模型(organization model) 定义组织责任，映射到业务流程，描述了一个单位如何以组织的机制支持内部需求，如主要工作划分、合同、管理者、专家等，它还描述有关的项目管理，有效的重用要求有意义的组织变更.
　　应用模型(application model) 描述组织所要构建的应用程序是什么，设置指导方针、标准模型、通常框架，以指导系统的内部设计；描述了标准界面、设施和业务需要的应用模型，即在该域的业务、信息模型上，能以什么应用模型、接口、设施来开展哪些应用.
　　技术模型(technology model) 为每一业务需要选择最好的技术，实现业务过程，支持业务流程性能目标，实现有效的系统开发和系统管理.根据位置类型和业务角色定义概念节点，确定应用和数据的分布，识别所要求的技术能力，识别在概念节点所要求的连接.
5.3　域模型的演进
　　在从可重用软件对象开发新系统中，有一些需求未被域模型所包括，当这些需求有很大重用价值时，就需要适当修改可重用产品.例如，系统有新的需求，就必须适当更新域模型.域工程的设计和实现阶段也必须重新审核，以修改可重用软件对象，支持新需求.域分析并不能完全预见未来，应有一套完整的演进机制，好的演进机制应可以从一个成功的应用开始.如图5所示，域模型在域工程中被创建，在应用工程中使用，并基于应用工程中产生的变化再次更新.


图5　域演化
6　从域模型到体系结构
　　如果说域模型描述了一系列的问题，域体系结构则描述了一系列解决的方案.将域分析的产品转化并映射到一个实现的框架，这个框架通常称为域体系结构，这个体系结构通常包括从体系结构直接到系统设计的过程.一些域分析方法包括了生成通用体系结构的步骤，如ODM的说明模型和FODA的特征模型.这些域分析方法对开发一个通用体系结构通常有些指导.
　　确定一种开发方法应用到通用体系结构需要注意许多关键性决策，如从通用体系结构导出的系统有哪些是重要的质量属性？通用体系结构应有哪种风格？通用体系结构应该怎样管理？采用哪种体系结构描述语言（ADL）来描述一个体系结构模型？从通用体系结构能构建多少个系统？这些系统的变化程度如何？对通用体系结构提供什么样的工具支持？应用工程如何自动进行，等等.因不是本文的重点，所以不在此做深入的讨论.
7　总　结
　　有效的重用必须是有目的地创建可重用构件.域分析活动是其中必不可少的重要阶段，这对面向特定域、基于重用的、以体系结构为中心的软件产品线开发有更深远的意义.此外，AT & T，GTE，Ericsson，NEC，Toshiba，HP［4］这些大公司成功的重用经验告诉我们，通过域分析对特定域中一系列产品的共性进行抽取，有效地控制其差异性，从而支持一系列产品的重用，才能大大提高软件开发效率，降低开发成本.
　　域分析作为系统重用的一项关键技术，尽管它已经在很多项目上成功地应用了［8，10］，但它还是处于不完全成熟的状态，域分析技术本身就是处于几个交叠的系统工程领域中，还没有完全地定义和限定.
　　与执行域分析相关的主要技术问题是缺乏标准和工具支持.缺乏标准导致这些域分析方法使用不同、不兼容的表示，阻碍了它被系统开发者广泛的采纳.面向对象技术提供了支持域模型的抽象和表示，域分析的标准很可能在系统分析中的面向对象分析和设计方法中开发，UML的出现必将大大地促进域分析的发展.
本课题得到国家自然科学基金项目(项目编号79770007)资助.
作者简介：李庆如，女，1968年12月生，工程师，主要研究领域为软件工程环境.
　　　　　麦中凡，男，1936年生，教授，主要研究领域为软件工程、程序设计语言、面向对象方法学、数据库等.
作者单位：北京航空航天大学计算机科学与工程系　北京　100083
参考文献
　1　　Patricia Collins Cornwell. HP Domain Analysis: Producing Useful Models for Reusable Software，1996. www.hp.hpl.com
　2　　STARS Reuse Concepts, Vo 1, Conceptual Framework for Reuse Processes (CFRP), Version 2. STARS Technology Center, Unisys STARS Technical Report: STARS-UC-05159/001/00, Arlington VA, 1992. www.asset.com
　3　　Prieto-Diaz Ruben. Domain analysis: An introduction. ACM SIGSOFT Software Engineering Notes, 1990, 15(2)
　4　　Domain engineering methods and tools handbook Vol I――Methods comprehensive approach to reusable defense software (CARDS). Loral Defense Systems-Eagan Valley Forge Engineering Center, STARS-VC-K017R1/001/00, 1994
　5　　Carma McClure. Software Reuse Techniques: A Guide to Adding Reuse to the Software Process. Extended Intelligence Inc, 1996. www. reusility.com
　6　　Neighbors J. Software construction using components ［Ph D dissertation］. Department of Information and Computer Science, University of California, Irvine, 1981
　7　　Kang K C, Cohen S G, Hess J A et al. Feature-oriented domain analysis (FODA): Feasibility study. Software Engineering Institute, Technical Report: CMU/SEI-90-TR-21, 1990. www.sei.cmu.edu
　8　　Cohen, Sholom G et al. Application of feature-oriented domain analysis to the army movement control domain. Software Engineering Institute, Carnegie Mellon University, CMU/SEI-91-TR-28, ADA 256590, 1992. www.sei.cmu.edu
　9　　Schnell K, Zalman N, Bhatt Atul. Transitioning domain analysis: An industry experience. Software Engineering Institute, Carnegie Mellon University, CMU/SEI-96-TR-009. 1996. www.sei.cmu.edu
　10　　Krut, Robert W Jr. Integrating 001 tool support into the feature-oriented domain analysis methodology. Software Engineering Institute, Carnegie Mellon University, CMU/SEI-93-TR-11, ESC-TR-93-188, 1993. www.sei.cmu.edu
　11　　 Mark A, Simos. Organization domain modeling (ODM): Formalizing the core domain modeling life cycle. www.asset.com 
原稿收到日期：1998-11-12；
修改稿收到日期：1999-05-10.
